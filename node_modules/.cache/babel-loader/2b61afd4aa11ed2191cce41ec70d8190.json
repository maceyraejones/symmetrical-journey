{"ast":null,"code":"import * as React from \"react\";\nimport { isFiniteNumber } from \"../utils/isFiniteNumber.js\";\nimport { roundedNumberString } from \"../utils/roundedNumber.js\";\nimport { ConvertColor } from \"../types/Color/ConvertColor.js\";\nimport { Rect } from \"../types/Rect.js\";\nimport { BoxShadow } from \"../types/Shadow.js\";\nimport { CustomPropertiesContext } from \"../presentation/CustomProperties.js\";\nimport { RenderTarget } from \"../types/RenderEnvironment.js\";\nexport function shadowsAsFilter(shadows) {\n  const filters = [];\n\n  if (shadows && shadows.length) {\n    const dropShadows = shadows.map(shadowItem => {\n      return `drop-shadow(${shadowItem.x}px ${shadowItem.y}px ${shadowItem.blur}px ${shadowItem.color})`;\n    });\n    filters.push(...dropShadows);\n  }\n\n  return filters;\n}\nexport function collectTextShadowsForProps(props, style) {\n  if (!props.shadows || props.shadows.length === 0) return;\n  const textShadow = props.shadows.map(shadow => {\n    return `${shadow.x}px ${shadow.y}px ${shadow.blur}px ${shadow.color}`;\n  }).join(\", \");\n  if (!textShadow) return;\n  style.textShadow = textShadow;\n}\nexport function collectBoxShadowsForProps(props, style) {\n  if (!props.shadows || props.shadows.length === 0) return;\n  const boxShadow = props.shadows.map(shadowItem => BoxShadow.toCSS(shadowItem)).join(\", \");\n  if (!boxShadow) return;\n  style.boxShadow = boxShadow;\n}\n/** @internal */\n\nexport function shadowForShape(boxShadows, rect, shapeId, fillAlpha, strokeAlpha, strokeWidth, strokeClipId, svgStrokeAttributes) {\n  const definition = [];\n  let outsetElement = null;\n  let insetElement = null;\n  const needsStrokeClip = false;\n  const shadows = [];\n  const insetShadows = [];\n  const boxShadowsCount = boxShadows.length; // The canvas renderer relies on setting this class to show / hide shadows at different zoom levels\n\n  const svgShadowClass = \"svg-shadow\";\n  const svgShadowProps = RenderTarget.current() === RenderTarget.canvas ? {\n    className: svgShadowClass\n  } : {};\n\n  for (let i = 0, il = boxShadowsCount; i < il; i++) {\n    const shadow = boxShadows[i];\n    shadow.inset ? insetShadows.push(shadow) : shadows.push(shadow);\n  }\n\n  if (shadows.length > 0) {\n    shadows.reverse();\n    const outsideShadowId = shapeId.add(\"_shadow_out\");\n    const normalizedFrame = Rect.atOrigin(rect);\n    const shadowRects = [normalizedFrame];\n\n    for (let i = 0, il = shadows.length; i < il; i++) {\n      const shadow = shadows[i];\n      const shadowFrame = localShadowFrame(shadow, normalizedFrame, true);\n\n      if (shadowFrame === null) {\n        continue;\n      }\n\n      shadowRects.push(shadowFrame);\n    }\n\n    let maxBlur = 0;\n    const filterElements = [];\n    const mergeElements = [];\n\n    for (let i = 0, il = shadows.length; i < il; i++) {\n      const shadow = shadows[i];\n      const shadowElements = outerShadowElements(shapeId, shadow, i);\n      maxBlur = Math.max(maxBlur, shadow.blur);\n      filterElements.push(shadowElements.filterElements);\n      mergeElements.push(shadowElements.mergeElement);\n    }\n\n    let expandStrokeWidth = strokeWidth;\n    if (!isFiniteNumber(expandStrokeWidth)) expandStrokeWidth = 0;\n    let miter = svgStrokeAttributes.strokeMiterlimit;\n    if (!isFiniteNumber(miter)) miter = 4;\n    let shadowRect = Rect.merge(...shadowRects);\n    shadowRect = Rect.inflate(shadowRect, (expandStrokeWidth * miter / 2 + maxBlur) * 1.1); // calculate percentage of shadow frame compared to node frame\n\n    const width = rect.width + (strokeWidth ? strokeWidth / 2 : 0.1);\n    const height = rect.height + (strokeWidth ? strokeWidth / 2 : 0.1);\n    const filterX = shadowRect.x / width * 100;\n    const filterY = shadowRect.y / height * 100;\n    const filterWidth = shadowRect.width / width * 100;\n    const filterHeight = shadowRect.height / height * 100;\n    definition.push(React.createElement(\"filter\", {\n      key: outsideShadowId.id,\n      id: outsideShadowId.id,\n      x: `${filterX.toFixed(1)}%`,\n      y: `${filterY.toFixed(1)}%`,\n      width: `${filterWidth.toFixed(1)}%`,\n      height: `${filterHeight.toFixed(1)}%`,\n      filterUnits: \"objectBoundingBox\",\n      ...svgShadowProps\n    }, filterElements, shadows.length > 1 ? React.createElement(\"feMerge\", null, mergeElements) : null));\n    outsetElement = React.createElement(\"g\", {\n      filter: outsideShadowId.urlLink,\n      ...svgShadowProps\n    }, React.createElement(\"use\", { ...svgStrokeAttributes,\n      fill: \"black\",\n      fillOpacity: fillAlpha <= 0 ? 0 : 1,\n      stroke: \"black\",\n      strokeOpacity: strokeAlpha <= 0 ? 0 : 1,\n      strokeWidth: strokeAlpha > 0 ? strokeWidth : 0,\n      xlinkHref: shapeId.link,\n      clipPath: strokeClipId.urlLink\n    }));\n  }\n\n  if (insetShadows.length) {\n    insetShadows.reverse();\n    const insideShadowId = shapeId.add(\"_shadow_inside\");\n    const normalizedFrame = Rect.atOrigin(rect);\n    const shadowFrames = [normalizedFrame];\n\n    for (let i = 0, il = insetShadows.length; i < il; i++) {\n      const shadow = insetShadows[i];\n      const shadowFrame = localShadowFrame(shadow, normalizedFrame, true);\n\n      if (shadowFrame === null) {\n        continue;\n      }\n\n      shadowFrames.push(shadowFrame);\n    }\n\n    const shadowRect = Rect.merge(...shadowFrames); // calculate percentage of shadow frame compared to node frame\n\n    const width = rect.width + (strokeWidth ? strokeWidth / 2 : 0.1);\n    const height = rect.height + (strokeWidth ? strokeWidth / 2 : 0.1);\n    const filterX = shadowRect.x / width * 100;\n    const filterY = shadowRect.y / height * 100;\n    const filterWidth = shadowRect.width / width * 100;\n    const filterHeight = shadowRect.height / height * 100;\n    const filterElements = [];\n    const mergeElements = [];\n\n    for (let i = 0, il = insetShadows.length; i < il; i++) {\n      const shadow = insetShadows[i];\n      const shadowElements = innerShadowElements(shapeId, shadow, i);\n      filterElements.push(shadowElements.filterElements);\n      mergeElements.push(shadowElements.mergeElement);\n    }\n\n    definition.push(React.createElement(\"filter\", {\n      key: insideShadowId.id,\n      id: insideShadowId.id,\n      x: `${filterX.toFixed(1)}%`,\n      y: `${filterY.toFixed(1)}%`,\n      width: `${filterWidth.toFixed(1)}%`,\n      height: `${filterHeight.toFixed(1)}%`,\n      filterUnits: \"objectBoundingBox\",\n      ...svgShadowProps\n    }, filterElements, insetShadows.length > 1 ? React.createElement(\"feMerge\", null, mergeElements) : null)); // if we rendered at lower resolution, we need a clip path ...\n\n    let clipPath;\n\n    if (needsStrokeClip) {\n      clipPath = strokeClipId.urlLink;\n    }\n\n    insetElement = React.createElement(\"use\", {\n      fill: \"black\",\n      fillOpacity: \"1\",\n      filter: insideShadowId.urlLink,\n      xlinkHref: shapeId.link,\n      clipPath: clipPath,\n      ...svgShadowProps\n    });\n  }\n\n  return {\n    definition,\n    outsetElement,\n    insetElement,\n    needsStrokeClip\n  };\n}\n\nfunction outerShadowElements(shapeID, shadow, index) {\n  const shadowKey = shapeID.add(\"_outer_shadow\" + index);\n  const offsetResultId = shadowKey.add(\"offset\").id;\n  const blurResultId = shadowKey.add(\"blur\").id;\n  const matrixResultId = shadowKey.add(\"matrix\").id;\n  const filterElements = React.createElement(OuterShadowFilterElements, {\n    key: shadowKey.id + \"-filters\",\n    shadow: shadow,\n    blurId: blurResultId,\n    offsetId: offsetResultId,\n    matrixId: matrixResultId\n  });\n  const mergeElement = React.createElement(\"feMergeNode\", {\n    key: shadowKey.id + \"-merge\",\n    in: matrixResultId\n  });\n  return {\n    filterElements,\n    mergeElement\n  };\n}\n\nconst OuterShadowFilterElements = props => {\n  const lookup = React.useContext(CustomPropertiesContext);\n  const {\n    shadow,\n    blurId,\n    offsetId,\n    matrixId\n  } = props; // We need to lookup the actual value for the color when dealing with CSS variables.\n  // This needs to be extracted into an API provided to Library dependants via a context.\n\n  let color = shadow.color;\n  const result = lookup(color);\n\n  if (result) {\n    color = result;\n  }\n\n  const rgb = ConvertColor.toRgb(color);\n  const r = roundedNumberString(rgb.r / 255, 3);\n  const g = roundedNumberString(rgb.g / 255, 3);\n  const b = roundedNumberString(rgb.b / 255, 3);\n  const matrixValues = `0 0 0 0 ${r}   0 0 0 0 ${g}   0 0 0 0 ${b}  0 0 0 ${rgb.a} 0`;\n  return React.createElement(React.Fragment, null, React.createElement(\"feOffset\", {\n    dx: shadow.x,\n    dy: shadow.y,\n    in: \"SourceAlpha\",\n    result: offsetId\n  }), React.createElement(\"feGaussianBlur\", {\n    stdDeviation: shadow.blur / 2,\n    in: offsetId,\n    result: blurId\n  }), React.createElement(\"feColorMatrix\", {\n    colorInterpolationFilters: \"sRGB\",\n    values: matrixValues,\n    type: \"matrix\",\n    in: blurId,\n    result: matrixId\n  }));\n};\n\nfunction innerShadowElements(shapeID, shadow, index) {\n  const shadowKey = shapeID.add(\"_inside_shadow\" + index);\n  const blurId = shadowKey.add(\"blur\").id;\n  const offsetId = shadowKey.add(\"offset\").id;\n  const compositeId = shadowKey.add(\"composite\").id;\n  const matrixId = shadowKey.add(\"matrix\").id;\n  const filterElements = React.createElement(InnerShadowFilterElements, {\n    key: shadowKey.id + \"-filters\",\n    shadow: shadow,\n    blurId: blurId,\n    offsetId: offsetId,\n    compositeId: compositeId,\n    matrixId: matrixId\n  });\n  const mergeElement = React.createElement(\"feMergeNode\", {\n    key: shadowKey.id + \"-merge\",\n    in: matrixId\n  });\n  return {\n    filterElements,\n    mergeElement\n  };\n}\n\nconst InnerShadowFilterElements = props => {\n  const lookup = React.useContext(CustomPropertiesContext);\n  const {\n    shadow,\n    blurId,\n    offsetId,\n    compositeId,\n    matrixId\n  } = props; // We need to lookup the actual value for the color when dealing with CSS variables.\n  // This needs to be extracted into an API provided to Library dependants via a context.\n\n  let color = shadow.color;\n  const result = lookup(color);\n\n  if (result) {\n    color = result;\n  }\n\n  const rgb = ConvertColor.toRgb(color);\n  const r = rgb.r / 255;\n  const g = rgb.g / 255;\n  const b = rgb.b / 255;\n  const matrixValues = `0 0 0 0 ${r}   0 0 0 0 ${g}   0 0 0 0 ${b}  0 0 0 ${rgb.a} 0`;\n  return React.createElement(React.Fragment, null, React.createElement(\"feGaussianBlur\", {\n    stdDeviation: shadow.blur / 2,\n    in: \"SourceAlpha\",\n    result: blurId\n  }), React.createElement(\"feOffset\", {\n    dx: shadow.x,\n    dy: shadow.y,\n    in: blurId,\n    result: offsetId\n  }), React.createElement(\"feComposite\", {\n    in: offsetId,\n    in2: \"SourceAlpha\",\n    operator: \"arithmetic\",\n    k2: \"-1\",\n    k3: \"1\",\n    result: compositeId\n  }), React.createElement(\"feColorMatrix\", {\n    colorInterpolationFilters: \"sRGB\",\n    values: matrixValues,\n    type: \"matrix\",\n    in: compositeId,\n    result: matrixId\n  }));\n};\n/** @internal */\n\n\nexport function localShadowFrame(shadow, frame, isSVG) {\n  let growth = shadow.blur;\n\n  if (BoxShadow.is(shadow)) {\n    if (isSVG !== true) {\n      if (shadow.inset) return null;\n      growth += shadow.spread;\n    }\n  }\n\n  let minX;\n  let maxX;\n  let minY;\n  let maxY;\n\n  if (isSVG === true) {\n    minX = -Math.abs(shadow.x) - growth;\n    maxX = Math.abs(shadow.x) + frame.width + growth;\n    minY = -Math.abs(shadow.y) - growth;\n    maxY = Math.abs(shadow.y) + frame.height + growth;\n  } else {\n    minX = shadow.x - growth;\n    maxX = shadow.x + frame.width + growth;\n    minY = shadow.y - growth;\n    maxY = shadow.y + frame.height + growth;\n  }\n\n  if (maxX <= minX || maxY <= minY) return null;\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}","map":{"version":3,"mappings":"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","names":["React","isFiniteNumber","roundedNumberString","ConvertColor","Rect","BoxShadow","CustomPropertiesContext","RenderTarget","shadowsAsFilter","shadows","filters","length","dropShadows","map","shadowItem","x","y","blur","color","push","collectTextShadowsForProps","props","style","textShadow","shadow","join","collectBoxShadowsForProps","boxShadow","toCSS","shadowForShape","boxShadows","rect","shapeId","fillAlpha","strokeAlpha","strokeWidth","strokeClipId","svgStrokeAttributes","definition","outsetElement","insetElement","needsStrokeClip","insetShadows","boxShadowsCount","svgShadowClass","svgShadowProps","current","canvas","className","i","il","inset","reverse","outsideShadowId","add","normalizedFrame","atOrigin","shadowRects","shadowFrame","localShadowFrame","maxBlur","filterElements","mergeElements","shadowElements","outerShadowElements","Math","max","mergeElement","expandStrokeWidth","miter","strokeMiterlimit","shadowRect","merge","inflate","width","height","filterX","filterY","filterWidth","filterHeight","key","id","toFixed","filterUnits","filter","urlLink","fill","fillOpacity","stroke","strokeOpacity","xlinkHref","link","clipPath","insideShadowId","shadowFrames","innerShadowElements","shapeID","index","shadowKey","offsetResultId","blurResultId","matrixResultId","OuterShadowFilterElements","blurId","offsetId","matrixId","in","lookup","useContext","result","rgb","toRgb","r","g","b","matrixValues","a","dx","dy","stdDeviation","colorInterpolationFilters","values","type","compositeId","InnerShadowFilterElements","in2","operator","k2","k3","frame","isSVG","growth","is","spread","minX","maxX","minY","maxY","abs"],"sources":["../../../src/render/style/shadow.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}