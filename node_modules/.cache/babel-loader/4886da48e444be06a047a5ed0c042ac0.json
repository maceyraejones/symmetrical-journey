{"ast":null,"code":"import * as React from \"react\";\nimport { StyleSheetContext } from \"../render/StyleSheetContext.js\";\nimport * as CSS from \"../render/utils/setDocumentStyles.js\";\nimport { isBrowser } from \"../utils/environment.js\"; // FIXME: this is mostly unnecessary as of https://github.com/framer/FramerStudio/pull/10631\n// because the minification process during SSG will move all the CSS into the <head>.\n// It still matters for a rare occassion when a site failed to be optimized (eg due to SSG errors).\n\nif (isBrowser()) {\n  // Move the SSR-injected <style> tags to <head> to avoid React hydration errors.\n  for (const node of document.querySelectorAll(\"style[data-framer-css-ssr]\")) {\n    document.head.appendChild(node);\n  }\n}\n\nexport const styleTagSSRMarker = {\n  \"data-framer-css-ssr\": true\n};\n/**\n * Render a React component with css that will be injected into the document's\n * head when the component is first rendered. The escapedCSS argument can either\n * be a string where each line is a css rule, or an array of css rule strings.\n *\n * @public\n */\n\nexport const withCSS = (Component, escapedCSS) => React.forwardRef((props, ref) => {\n  const {\n    sheet,\n    cache\n  } = React.useContext(StyleSheetContext) ?? {};\n\n  if (!isBrowser()) {\n    const concatenatedCSS = Array.isArray(escapedCSS) ? escapedCSS.join(\"\\n\") : escapedCSS;\n    return React.createElement(React.Fragment, null, React.createElement(\"style\", { ...styleTagSSRMarker,\n      dangerouslySetInnerHTML: {\n        __html: concatenatedCSS\n      }\n    }), React.createElement(Component, { ...props,\n      ref: ref\n    }));\n  } // We used to use useLayoutEffect for injecting styles, but this caused\n  // https://github.com/framer/company/issues/22678. Situation:\n  //\n  //     const ContainerWithCSS = withCSS(Container, css)\n  //     <ContainerWithCSS>\n  //         <Component />\n  //     </ContainerWithCSS>\n  //\n  // \"Component\" measures something in a useLayoutEffect on first mount.\n  // useLayoutEffects fire \"bottom-up\", which means Component will measure\n  // before ContainerWithCSS injects styles, which means the measurement\n  // might be wrong.\n  //\n  // To prevent that, we now inject styles during the first render.\n  //\n  // Note that in concurrent mode, the initial render might get discarded\n  // and re-tried later, and if the strict mode is any evidence, this\n  // might also cause the ref to be discarded. Which means we should have\n  // some second level of defense against injecting styles multiple times.\n  // (Currently, CSS.setDocumentStyles takes care of that.)\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n\n\n  const didInjectStyles = React.useRef(false);\n\n  if (!didInjectStyles.current) {\n    const css = Array.isArray(escapedCSS) ? escapedCSS : escapedCSS.split(\"\\n\");\n    css.forEach(rule => rule && CSS.injectCSSRule(rule, sheet, cache));\n    didInjectStyles.current = true;\n  }\n\n  return React.createElement(Component, { ...props,\n    ref: ref\n  });\n});","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAAiCC,iBAAjC,QAA0D,gCAA1D;AACA,OAAO,KAAKC,GAAZ,MAAqB,sCAArB;AACA,SAASC,SAAT,QAA0B,yBAA1B,C,CAEA;AACA;AACA;;AACA,IAAIA,SAAS,EAAb,EAAiB;AACb;AACA,OAAK,MAAMC,IAAX,IAAmBC,QAAQ,CAACC,gBAAT,CAA0B,4BAA1B,CAAnB,EAA4E;AACxED,YAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BJ,IAA1B;AACH;AACJ;;AAED,OAAO,MAAMK,iBAAiB,GAAG;AAAE,yBAAuB;AAAzB,CAA1B;AAEP;;;;;;;;AAOA,OAAO,MAAMC,OAAO,GAAG,CAAmBC,SAAnB,EAAsDC,UAAtD,KACnBZ,KAAK,CAACa,UAAN,CAAiB,CAACC,KAAD,EAAWC,GAAX,KAAkB;AAC/B,QAAM;AAAEC,SAAF;AAASC;AAAT,MAAmBjB,KAAK,CAACkB,UAAN,CAAqDjB,iBAArD,KAA2E,EAApG;;AAEA,MAAI,CAACE,SAAS,EAAd,EAAkB;AACd,UAAMgB,eAAe,GAAGC,KAAK,CAACC,OAAN,CAAcT,UAAd,IAA4BA,UAAU,CAACU,IAAX,CAAgB,IAAhB,CAA5B,GAAoDV,UAA5E;AACA,WACIZ,0CACIA,kCAAWS,iBAAX;AAA8Bc,6BAAuB,EAAE;AAAEC,cAAM,EAAEL;AAAV;AAAvD,MADJ,EAEInB,oBAACW,SAAD,EAAU,KAAKG,KAAL;AAAYC,SAAG,EAAEA;AAAjB,KAAV,CAFJ,CADJ;AAMH,GAX8B,CAa/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,QAAMU,eAAe,GAAGzB,KAAK,CAAC0B,MAAN,CAAa,KAAb,CAAxB;;AACA,MAAI,CAACD,eAAe,CAACE,OAArB,EAA8B;AAC1B,UAAMC,GAAG,GAAGR,KAAK,CAACC,OAAN,CAAcT,UAAd,IAA4BA,UAA5B,GAAyCA,UAAU,CAACiB,KAAX,CAAiB,IAAjB,CAArD;AACAD,OAAG,CAACE,OAAJ,CAAYC,IAAI,IAAIA,IAAI,IAAI7B,GAAG,CAAC8B,aAAJ,CAAkBD,IAAlB,EAAwBf,KAAxB,EAA+BC,KAA/B,CAA5B;AACAQ,mBAAe,CAACE,OAAhB,GAA0B,IAA1B;AACH;;AAED,SAAO3B,oBAACW,SAAD,EAAU,KAAKG,KAAL;AAAYC,OAAG,EAAEA;AAAjB,GAAV,CAAP;AACH,CA3CD,CADG","names":["React","StyleSheetContext","CSS","isBrowser","node","document","querySelectorAll","head","appendChild","styleTagSSRMarker","withCSS","Component","escapedCSS","forwardRef","props","ref","sheet","cache","useContext","concatenatedCSS","Array","isArray","join","dangerouslySetInnerHTML","__html","didInjectStyles","useRef","current","css","split","forEach","rule","injectCSSRule"],"sources":["../../src/modules/withCSS.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}