{"ast":null,"code":"import * as React from \"react\";\nimport { useMemo, useRef, useCallback } from \"react\";\nimport { useMotionValue, useDragControls } from \"framer-motion\";\nimport sync from \"framesync\";\nimport { FrameWithMotion } from \"../../render/presentation/Frame/FrameWithMotion.js\";\nimport { EmptyState } from \"../EmptyState.js\";\nimport { isMotionValue } from \"../../render/utils/isMotionValue.js\";\nimport { RenderTarget } from \"../../render/types/RenderEnvironment.js\";\nimport { isFiniteNumber } from \"../../render/utils/isFiniteNumber.js\";\nimport { useWheelScroll } from \"./useWheelScroll.js\";\nimport { useLayoutId } from \"../../render/utils/useLayoutId.js\";\nimport { useIsInCurrentNavigationTarget } from \"../NavigationContainerContext.js\";\nimport { injectComponentCSSRules } from \"../../render/utils/injectComponentCSSRules.js\";\nimport { useIsomorphicLayoutEffect } from \"../../useIsomorphicLayoutEffect.js\";\nconst directionMap = {\n  horizontal: \"x\",\n  vertical: \"y\",\n  both: true\n};\n\nfunction convertScrollDirectionToDrag(scrollDirection) {\n  return scrollDirection ? directionMap[scrollDirection] : scrollDirection;\n}\n\nconst useUpdateChildSize = _ref => {\n  let {\n    dragDirection,\n    children,\n    fromCanvasComponent\n  } = _ref;\n  return useMemo(() => {\n    return React.Children.map(children, child => {\n      if (child === null || typeof child !== \"object\" || typeof child.type === \"string\") {\n        return child;\n      }\n\n      const updatedSize = {};\n\n      switch (dragDirection) {\n        case \"vertical\":\n          updatedSize.width = \"100%\";\n          break;\n\n        case \"horizontal\":\n          updatedSize.height = \"100%\";\n          break;\n\n        default:\n          return child;\n      }\n\n      const update = fromCanvasComponent ? {\n        style: Object.assign({}, child.props.style, updatedSize)\n      } : updatedSize;\n      return React.cloneElement(child, update);\n    });\n  }, [dragDirection, children]);\n};\n\nconst numberFromOptionalMotionValue = value => {\n  return typeof value === \"number\" ? value : value.get();\n};\n/**\n * @private\n */\n\n\nexport const EmulatedScroll = React.forwardRef(function EmulatedScroll(props, forwardedRef) {\n  const {\n    direction = \"vertical\",\n    directionLock = false,\n    dragEnabled = true,\n    dragElastic,\n    dragMomentum,\n    dragTransition,\n    wheelEnabled = true,\n    contentOffsetX = 0,\n    contentOffsetY = 0,\n    contentWidth,\n    contentHeight,\n    onScrollStart,\n    onScroll,\n    onScrollEnd,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onUpdate,\n    onDirectionLock,\n    style,\n    children,\n    scrollAnimate,\n    resetOffset,\n    overdragEnabled = true,\n    layoutId: specificLayoutId,\n    native,\n    ...containerProps\n  } = props;\n  const layoutId = useLayoutId(props, {\n    specificLayoutId,\n    postfix: \"scroll\"\n  });\n  const defaultX = useMotionValue(typeof contentOffsetX === \"number\" ? contentOffsetX : 0);\n  const defaultY = useMotionValue(typeof contentOffsetY === \"number\" ? contentOffsetY : 0);\n  const x = isMotionValue(contentOffsetX) ? contentOffsetX : defaultX;\n  const y = isMotionValue(contentOffsetY) ? contentOffsetY : defaultY;\n  const measuredConstraints = useRef(null);\n  const dragControls = useDragControls();\n  const isInTarget = useIsInCurrentNavigationTarget();\n  const wasInTargetRef = useRef(true);\n  injectComponentCSSRules();\n\n  function setMeasureDragConstraints(constraints) {\n    constraints = offsetToZero(constraints);\n    if (contentWidth !== undefined) constraints.left = -contentWidth;\n    if (contentHeight !== undefined) constraints.top = -contentHeight;\n    return measuredConstraints.current = constraints;\n  }\n\n  const {\n    initial,\n    prev\n  } = useRef({\n    initial: {\n      x: 0,\n      y: 0\n    },\n    prev: {\n      x: 0,\n      y: 0\n    }\n  }).current;\n  const isPreview = RenderTarget.current() === RenderTarget.preview;\n  const containerFallbackRef = useRef(null);\n  const containerRef = forwardedRef || containerFallbackRef;\n  const contentRef = useRef(null);\n  const lastOffsetRef = useRef(null);\n\n  function shouldResetScroll(inTarget) {\n    const hasEnteredTarget = inTarget && wasInTargetRef.current === false;\n    return resetOffset && hasEnteredTarget;\n  }\n\n  function measureAndUpdateScrollOffset() {\n    if (!contentRef.current || !containerRef.current) return; // If the component is flagged to reset its scroll offset to its initial\n    // values when it appears, check if the scroll was previously not\n    // visible, and has become visible, and if so flag that we must reset\n    // the scroll offset.\n\n    const mustReset = shouldResetScroll(isInTarget);\n    wasInTargetRef.current = isInTarget; // If the offset properties are not set, we don't need to measure and\n    // update scroll offset.\n\n    const previous = lastOffsetRef.current;\n    if (previous === null && contentOffsetX === undefined && contentOffsetY === undefined) return; // Check if the values of the offset props have changed, requiring\n    // scroll position to be updated. We only do this when the props are\n    // numbers, because if they are motionValues, the offset has already\n    // been changed by the motionValues themselves.\n\n    const shouldUpdateOffset = previous === null || !isMotionValue(contentOffsetX) && contentOffsetX !== previous.offsetX || !isMotionValue(contentOffsetY) && contentOffsetY !== previous.offsetY; // Check if the new maximum scroll offset has changed as a result of the\n    // container or the scrollable content resizing.\n\n    const currentMaxXOffset = contentRef.current.offsetWidth - containerRef.current.offsetWidth;\n    const currentMaxYOffset = contentRef.current.offsetHeight - containerRef.current.offsetHeight;\n    const hasSizeChanged = currentMaxXOffset !== previous?.maxXOffset || currentMaxYOffset !== previous?.maxYOffset; // Check if the actual scroll offset has changed via user interaction\n    // relative to the last offset set via this function.\n\n    const hasScrollOffsetChanged = previous?.x !== x.get() || previous?.y !== y.get(); // If the size has changed, but the user hasn't scrolled away from the\n    // last set scroll offset, we expect the resize not to result in an\n    // incorrect scroll position. For instance, the maximum scrollable size\n    // could shrink, meaning that a scroll offset that was previously\n    // acceptable now results in undesirable overscroll. In this case we\n    // need to reset to an acceptable offset.\n\n    const shouldStayPinned = hasSizeChanged && !hasScrollOffsetChanged;\n\n    if (mustReset || shouldUpdateOffset || shouldStayPinned) {\n      const currentOffsetX = direction !== \"vertical\" ? numberFromOptionalMotionValue(contentOffsetX) : 0;\n      const currentOffsetY = direction !== \"horizontal\" ? numberFromOptionalMotionValue(contentOffsetY) : 0;\n      const nextXOffset = -Math.min(currentOffsetX, currentMaxXOffset);\n      const nextYOffset = -Math.min(currentOffsetY, currentMaxYOffset);\n      x.set(nextXOffset);\n      y.set(nextYOffset);\n      lastOffsetRef.current = {\n        maxXOffset: currentMaxXOffset,\n        maxYOffset: currentMaxYOffset,\n        offsetX: currentOffsetX,\n        offsetY: currentOffsetY,\n        x: nextXOffset,\n        y: nextYOffset\n      };\n    }\n  } // onBeforeLayoutMeasure is not called on the canvas, so handle updating\n  // scroll offset on the canvas on any update with a layout effect.\n\n\n  useIsomorphicLayoutEffect(() => {\n    if (RenderTarget.current() !== RenderTarget.canvas) return;\n    measureAndUpdateScrollOffset();\n  }); // onBeforeLayoutMeasure is not called on mount, so handle updating scroll\n  // on mount in the preview.\n\n  useIsomorphicLayoutEffect(() => {\n    if (RenderTarget.current() === RenderTarget.canvas) return;\n    measureAndUpdateScrollOffset();\n  }, []); // isInTarget can change without motion calling measure on the element. To\n  // solve that case, we run an effect when isInTarget changes, and call\n  // measureAndUpdate if we need to reset. Since an effect runs after motion's\n  // measurements phase, this will only run if we haven't already reset during\n  // the render phase.\n\n  React.useEffect(() => {\n    if (shouldResetScroll(isInTarget)) measureAndUpdateScrollOffset(); // Always unset isInTarget to false on a change.\n    // measureAndUpdateScrollOffset may not be called when navigating off\n    // screen.\n\n    if (isInTarget === false) wasInTargetRef.current = false;\n  }, [isInTarget]);\n\n  const getLatestPoint = () => ({\n    x: x.get(),\n    y: y.get()\n  });\n\n  const resetInitialPoint = useCallback(() => {\n    const point = getLatestPoint();\n    initial.x = point.x;\n    initial.y = point.y;\n    prev.x = point.x;\n    prev.y = point.y;\n  }, []);\n  const getPointData = useCallback(() => {\n    const point = getLatestPoint();\n    const data = {\n      point,\n      velocity: {\n        x: x.getVelocity(),\n        y: y.getVelocity()\n      },\n      offset: {\n        x: point.x - initial.x,\n        y: point.y - initial.y\n      },\n      delta: {\n        x: point.x - prev.x,\n        y: point.y - prev.y\n      }\n    };\n    prev.x = point.x;\n    prev.y = point.y;\n    return data;\n  }, [x, y]);\n  const updateScrollListeners = useCallback(() => {\n    onUpdate && onUpdate({\n      x: x.get(),\n      y: y.get()\n    });\n    onScroll && onScroll(getPointData());\n  }, [onScroll, onUpdate, getPointData, x, y]);\n  const scheduleUpdateScrollListeners = useCallback(() => {\n    sync.update(updateScrollListeners, false, true);\n  }, [updateScrollListeners]);\n\n  const onMotionDragStart = (event, info) => {\n    resetInitialPoint();\n    onDragStart && onDragStart(event, info);\n    onScrollStart && onScrollStart(info);\n  };\n\n  const onMotionDragTransitionEnd = () => onScrollEnd && onScrollEnd(getPointData());\n\n  const onWheelScrollStart = info => {\n    onScrollStart?.(info);\n  };\n\n  useWheelScroll(containerRef, {\n    enabled: wheelEnabled,\n    initial,\n    prev,\n    direction,\n    offsetX: x,\n    offsetY: y,\n    onScrollStart: onWheelScrollStart,\n    onScroll,\n    onScrollEnd,\n    constraints: measuredConstraints\n  });\n  const overdragX = useMotionValue(0);\n  const overdragY = useMotionValue(0);\n  useIsomorphicLayoutEffect(() => {\n    const setScrollX = xValue => {\n      const element = containerRef.current;\n      if (!(element instanceof HTMLDivElement)) return;\n      element.scrollLeft = -xValue;\n      const constraints = measuredConstraints.current;\n\n      if (constraints && overdragEnabled) {\n        let overdragXValue = 0;\n        if (xValue > constraints.right) overdragXValue = xValue;\n        if (xValue < constraints.left) overdragXValue = xValue - constraints.left;\n        overdragX.set(overdragXValue);\n      }\n\n      scheduleUpdateScrollListeners();\n    };\n\n    const currentX = x.get();\n    if (currentX !== 0) setScrollX(currentX);\n    return x.onChange(setScrollX);\n  }, [x, overdragX, scheduleUpdateScrollListeners, overdragEnabled]);\n  useIsomorphicLayoutEffect(() => {\n    const setScrollY = yValue => {\n      const element = containerRef.current;\n      if (!(element instanceof HTMLDivElement)) return;\n      element.scrollTop = -yValue;\n      const constraints = measuredConstraints.current;\n\n      if (constraints && overdragEnabled) {\n        let overdragYValue = 0;\n        if (yValue > constraints.bottom) overdragYValue = yValue;\n        if (yValue < constraints.top) overdragYValue = yValue - constraints.top;\n        overdragY.set(overdragYValue);\n      }\n\n      scheduleUpdateScrollListeners();\n    };\n\n    const currentY = y.get();\n    if (currentY !== 0) setScrollY(currentY);\n    return y.onChange(setScrollY);\n  }, [y, overdragY, scheduleUpdateScrollListeners, overdragEnabled]);\n  const nativeOnScroll = React.useCallback(() => {\n    const element = containerRef.current;\n    if (!(element instanceof HTMLDivElement)) return; // we ignore native scroll changes when we are dragging or finishing a drag animation\n\n    const xDelta = Math.abs(x.get() + element.scrollLeft);\n    const yDelta = Math.abs(y.get() + element.scrollTop);\n    if (xDelta > 1) x.set(-element.scrollLeft);\n    if (yDelta > 1) y.set(-element.scrollTop);\n  }, [x, y]);\n  const isEmpty = React.Children.count(children) === 0;\n  const width = direction !== \"vertical\" && !isEmpty ? \"auto\" : \"100%\";\n  const height = direction !== \"horizontal\" && !isEmpty ? \"auto\" : \"100%\";\n  const size = !containerProps.__fromCanvasComponent ? {\n    width: containerProps.__fromCodeComponentNode ? \"100%\" : containerProps.width,\n    height: containerProps.__fromCodeComponentNode ? \"100%\" : containerProps.height\n  } : {};\n  return React.createElement(FrameWithMotion, {\n    \"data-framer-component-type\": \"Scroll\",\n    background: \"none\" // need to set here to prevent default background from Frame\n    ,\n    ...containerProps,\n    ...size,\n    style: { ...style,\n      willChange: isPreview ? \"transform\" : undefined,\n      overflow: \"hidden\"\n    },\n    onScroll: nativeOnScroll,\n    preserve3d: containerProps.preserve3d,\n    ref: containerRef,\n    layoutId: layoutId,\n    layoutScroll: true,\n    onBeforeLayoutMeasure: measureAndUpdateScrollOffset\n  }, React.createElement(FrameWithMotion, {\n    \"data-framer-component-type\": \"ScrollContentWrapper\",\n    animate: scrollAnimate,\n    drag: dragEnabled && convertScrollDirectionToDrag(direction),\n    dragDirectionLock: directionLock,\n    dragElastic: dragElastic,\n    dragMomentum: dragMomentum,\n    dragTransition: dragTransition,\n    dragConstraints: containerRef,\n    dragControls: dragControls,\n    onDragStart: onMotionDragStart,\n    onDrag: onDrag,\n    onDragEnd: onDragEnd,\n    onDragTransitionEnd: onMotionDragTransitionEnd,\n    onDirectionLock: onDirectionLock,\n    onMeasureDragConstraints: setMeasureDragConstraints,\n    width: width,\n    height: height,\n    _dragX: x,\n    _dragY: y,\n    position: \"relative\",\n    x: overdragEnabled ? overdragX : undefined,\n    y: overdragEnabled ? overdragY : undefined,\n    ref: contentRef,\n    style: {\n      display: isEmpty ? \"block\" : \"inline-block\",\n      willChange: isPreview ? \"transform\" : undefined,\n      backgroundColor: \"transparent\",\n      overflow: \"visible\",\n      minWidth: \"100%\",\n      minHeight: \"100%\"\n    },\n    preserve3d: containerProps.preserve3d\n  }, React.createElement(EmptyState, {\n    children: children,\n    size: {\n      width: isFiniteNumber(containerProps.width) ? containerProps.width : \"100%\",\n      height: isFiniteNumber(containerProps.height) ? containerProps.height : \"100%\"\n    },\n    insideUserCodeComponent: !containerProps.__fromCodeComponentNode,\n    title: \"Scroll\",\n    description: \"Click and drag the connector to any frame on the canvas \\u2192\"\n  }), useUpdateChildSize({\n    dragDirection: direction,\n    children,\n    fromCanvasComponent: containerProps.__fromCanvasComponent\n  })));\n});\n/**\n * Because we're overriding the usual drag x/y with scrollTop and scrollLeft\n * our constraints calculations need rebasing to 0\n */\n\nfunction offsetToZero(_ref2) {\n  let {\n    top,\n    left,\n    right,\n    bottom\n  } = _ref2;\n  const width = right - left;\n  const height = bottom - top;\n  return {\n    top: -height,\n    left: -width,\n    right: 0,\n    bottom: 0\n  };\n}","map":{"version":3,"mappings":"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","names":["React","useMemo","useRef","useCallback","useMotionValue","useDragControls","sync","FrameWithMotion","EmptyState","isMotionValue","RenderTarget","isFiniteNumber","useWheelScroll","useLayoutId","useIsInCurrentNavigationTarget","injectComponentCSSRules","useIsomorphicLayoutEffect","directionMap","horizontal","vertical","both","convertScrollDirectionToDrag","scrollDirection","useUpdateChildSize","dragDirection","children","fromCanvasComponent","Children","map","child","type","updatedSize","width","height","update","style","Object","assign","props","cloneElement","numberFromOptionalMotionValue","value","get","EmulatedScroll","forwardRef","forwardedRef","direction","directionLock","dragEnabled","dragElastic","dragMomentum","dragTransition","wheelEnabled","contentOffsetX","contentOffsetY","contentWidth","contentHeight","onScrollStart","onScroll","onScrollEnd","onDragStart","onDrag","onDragEnd","onUpdate","onDirectionLock","scrollAnimate","resetOffset","overdragEnabled","layoutId","specificLayoutId","native","containerProps","postfix","defaultX","defaultY","x","y","measuredConstraints","dragControls","isInTarget","wasInTargetRef","setMeasureDragConstraints","constraints","offsetToZero","undefined","left","top","current","initial","prev","isPreview","preview","containerFallbackRef","containerRef","contentRef","lastOffsetRef","shouldResetScroll","inTarget","hasEnteredTarget","measureAndUpdateScrollOffset","mustReset","previous","shouldUpdateOffset","offsetX","offsetY","currentMaxXOffset","offsetWidth","currentMaxYOffset","offsetHeight","hasSizeChanged","maxXOffset","maxYOffset","hasScrollOffsetChanged","shouldStayPinned","currentOffsetX","currentOffsetY","nextXOffset","Math","min","nextYOffset","set","canvas","useEffect","getLatestPoint","resetInitialPoint","point","getPointData","data","velocity","getVelocity","offset","delta","updateScrollListeners","scheduleUpdateScrollListeners","onMotionDragStart","event","info","onMotionDragTransitionEnd","onWheelScrollStart","enabled","overdragX","overdragY","setScrollX","xValue","element","HTMLDivElement","scrollLeft","overdragXValue","right","currentX","onChange","setScrollY","yValue","scrollTop","overdragYValue","bottom","currentY","nativeOnScroll","xDelta","abs","yDelta","isEmpty","count","size","__fromCanvasComponent","__fromCodeComponentNode","background","willChange","overflow","preserve3d","ref","layoutScroll","onBeforeLayoutMeasure","animate","drag","dragDirectionLock","dragConstraints","onDragTransitionEnd","onMeasureDragConstraints","_dragX","_dragY","position","display","backgroundColor","minWidth","minHeight","insideUserCodeComponent","title","description"],"sources":["../../../src/components/Scroll/EmulatedScroll.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}