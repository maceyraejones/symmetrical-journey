{"ast":null,"code":"import { hash } from \"../../utils/string.js\";\nimport { isBrowser } from \"../../utils/environment.js\";\nconst useDOM = isBrowser();\n\nclass SharedSVGEntry {\n  id;\n  innerHTML;\n  count;\n\n  constructor(id, innerHTML) {\n    let count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this.id = id;\n    this.innerHTML = innerHTML;\n    this.count = count;\n  }\n\n}\n/** Complex SVGs are placed once in an invisible div and used as a template for all instances.\n * Notice the manager uses the svg string itself as the key to manage global instances with. */\n\n\nclass SharedSVGManager {\n  entries = new Map();\n\n  debugGetEntries() {\n    return this.entries;\n  }\n  /** Request to render a svg, this will ensure there is a global instance and will return a\n   * template referencing the image. Must be balanced with `unsubscribe()` calls using the same\n   * svg. If called multiple times while the shared SVG exists, the generateUniqueIds and\n   * contentId parameters are ignored. */\n\n\n  subscribe(svg, generateUniqueIds, contentId) {\n    if (!svg || svg === \"\") return \"\";\n    let entry = this.entries.get(svg);\n\n    if (!entry) {\n      // Create a new entry, computing a content id if needed, rewriting ids to be globally\n      // unique if needed.\n      if (!contentId) {\n        contentId = \"svg\" + String(hash(svg)) + \"_\" + String(svg.length);\n      }\n\n      let uniqueSVG = svg;\n\n      if (generateUniqueIds) {\n        uniqueSVG = prefixIdsInSVG(svg, contentId);\n      }\n\n      entry = this.createDOMElementFor(uniqueSVG, contentId);\n      this.entries.set(svg, entry);\n    }\n\n    entry.count += 1;\n    return entry.innerHTML;\n  }\n  /** When no longer rendering an svg it must be unsubscribed from so resources can be cleaned up.\n   * Pass in the same svg as used with `subscribe()`. */\n\n\n  unsubscribe(svg) {\n    if (!svg || svg === \"\") return;\n    const entry = this.entries.get(svg);\n    if (!entry) return;\n    entry.count -= 1;\n    if (entry.count > 0) return; // When the last use of the svg goes away, after a delay, we see if it should be removed.\n\n    setTimeout(() => this.maybeRemoveEntry(svg), 5000);\n  }\n\n  maybeRemoveEntry(svg) {\n    const entry = this.entries.get(svg);\n    if (!entry) return;\n    if (entry.count > 0) return;\n    this.entries.delete(svg);\n    this.removeDOMElement(entry);\n  }\n\n  removeDOMElement(entry) {\n    const containerId = \"container_\" + entry.id;\n\n    if (useDOM) {\n      const container = document?.querySelector(\"#\" + containerId);\n      container?.remove();\n    }\n  }\n\n  createDOMElementFor(svg, id) {\n    const containerId = \"container_\" + id;\n\n    if (useDOM) {\n      let svgTemplates = document.querySelector(\"#svg-templates\");\n\n      if (!svgTemplates) {\n        svgTemplates = document.createElement(\"div\");\n        svgTemplates.id = \"svg-templates\";\n        svgTemplates.style.position = \"absolute\";\n        svgTemplates.style.top = \"0\";\n        svgTemplates.style.left = \"0\";\n        svgTemplates.style.width = \"0\";\n        svgTemplates.style.height = \"0\";\n        svgTemplates.style.overflow = \"hidden\";\n        document.body.appendChild(svgTemplates);\n      }\n\n      if (!document.querySelector(\"#\" + containerId)) {\n        const container = document.createElement(\"div\");\n        container.id = containerId;\n        container.innerHTML = svg;\n        container.firstElementChild.id = id;\n        svgTemplates.appendChild(container);\n      }\n    } // An svg referencing a shared template by id.\n\n\n    const innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"width: 100%; height: 100%\"><use href=\"#${id}\"></use></svg>`;\n    return new SharedSVGEntry(id, innerHTML);\n  }\n\n}\n\nexport const sharedSVGManager = new SharedSVGManager();\n/* Takes an SVG string and prefix all the ids and their occurrence with the given string */\n\nexport function prefixIdsInSVG(svg, prefix) {\n  if (typeof DOMParser === \"undefined\") return svg;\n  const domParser = new DOMParser();\n\n  try {\n    const doc = domParser.parseFromString(svg, \"image/svg+xml\");\n    const el = doc.getElementsByTagName(\"svg\")[0];\n    if (!el) return svg;\n    const sanitizedPrefix = sanitizeString(prefix);\n    recursivelyPrefixId(el, sanitizedPrefix);\n    return el.outerHTML;\n  } catch (error) {\n    throw Error(`Failed to parse SVG: ${error}`);\n  }\n} // Valid SVG IDs only include designated characters (letters, digits, and a few punctuation marks),\n// and do not start with a digit, a full stop (.) character, or a hyphen-minus (-) character.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/id\n\nfunction sanitizeString(str) {\n  return str.replace(/[^a-z0-9\\-_:.]|^[^a-z]+/gi, \"\"); // source: https://stackoverflow.com/a/9635731/9300219\n}\n\nfunction recursivelyPrefixId(el, prefix) {\n  // element itself\n  prefixId(el, prefix); // handle children\n\n  const childNodes = Array.from(el.children);\n  childNodes.forEach(node => {\n    recursivelyPrefixId(node, prefix);\n  });\n}\n\nfunction prefixId(el, prefix) {\n  const attributes = el.getAttributeNames();\n  attributes.forEach(attr => {\n    const value = el.getAttribute(attr);\n    if (!value) return; // prefix the id\n\n    if (attr === \"id\") {\n      el.setAttribute(attr, `${prefix}_${value}`);\n    } // prefix occurrence in href (SVG2) or xlink:href\n\n\n    if (attr === \"href\" || attr === \"xlink:href\") {\n      const [base, fragmentIdentifier] = value.split(\"#\"); // The value might have a base URL in two cases:\n      // 1. It's a hyperlink\n      // 2. It's referencing the fragment from another document\n      // In both cases we don't want to touch the value\n\n      if (base) return;\n      el.setAttribute(attr, `#${prefix}_${fragmentIdentifier}`);\n      return;\n    } // prefix occurrence in url()\n\n\n    const URL_REF = \"url(#\";\n\n    if (value.includes(URL_REF)) {\n      const prefixedValue = value.replace(URL_REF, `${URL_REF}${prefix}_`);\n      el.setAttribute(attr, prefixedValue);\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["hash","isBrowser","useDOM","SharedSVGEntry","id","innerHTML","count","constructor","SharedSVGManager","entries","Map","debugGetEntries","subscribe","svg","generateUniqueIds","contentId","entry","get","String","length","uniqueSVG","prefixIdsInSVG","createDOMElementFor","set","unsubscribe","setTimeout","maybeRemoveEntry","delete","removeDOMElement","containerId","container","document","querySelector","remove","svgTemplates","createElement","style","position","top","left","width","height","overflow","body","appendChild","firstElementChild","sharedSVGManager","prefix","DOMParser","domParser","doc","parseFromString","el","getElementsByTagName","sanitizedPrefix","sanitizeString","recursivelyPrefixId","outerHTML","error","Error","str","replace","prefixId","childNodes","Array","from","children","forEach","node","attributes","getAttributeNames","attr","value","getAttribute","setAttribute","base","fragmentIdentifier","split","URL_REF","includes","prefixedValue"],"sources":["../../../src/render/presentation/SharedSVGManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}