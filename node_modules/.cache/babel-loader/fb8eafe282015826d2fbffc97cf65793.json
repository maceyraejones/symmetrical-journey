{"ast":null,"code":"import { modulate, isNumeric, numberFromString } from \"./Utils.js\";\nimport { rgbToRgb, rgbToHsl as rgbToHslConverter, hslToRgb, rgbToHex, rgbToHsluv, rgbToHsv, rgbaFromHusl, stringToObject, hsvToRgb } from \"./converters.js\";\nimport { ColorFormat, ColorMixModelType } from \"./types.js\";\nimport { cssNames } from \"./CSSNames.js\";\nexport { Color };\nconst cache = new Map();\n/**\n * The Color function can be used to define colors, either as a string value or as an object. All colors\n * are converted to a Color object with `r, g, b`, `h, s, l` and an `a` value.\n * There are also various helpers on the Color function for working with,\n * modifying and detecting colors.\n *\n * ```jsx\n * // HEX\n * const blue = Color(\"#0099FF\")\n *\n * // RGB\n * const blue = Color(\"rgb(0, 153, 255)\")\n * const blue = Color(0, 153, 255)\n * const blue = Color({r: 0, g: 153, b: 255})\n * const blue = Color({r: 0, g: 153, b: 255, a: 1})\n *\n * // HSL\n * const blue = Color(\"hsl(204, 100%, 50%)\")\n * const blue = Color({h: 204, s: 1, l: 0.5})\n * const blue = Color({h: 204, s: 1, l: 0.5, a: 1})\n * ```\n * @public\n */\n\nfunction Color(color, r, g, b) {\n  if (typeof color === \"string\") {\n    let c = cache.get(color);\n    if (c) return c;\n    c = createColor(color);\n    if (c === undefined) return { ...Color(\"black\"),\n      isValid: false\n    };\n    cache.set(color, c); // TODO: should be frozen?\n\n    return c;\n  }\n\n  const created = createColor(color, r, g, b);\n  return created !== undefined ? created : { ...Color(\"black\"),\n    isValid: false\n  };\n}\n\nfunction createColor(color, r, g, b) {\n  if (color === \"\") return undefined;\n  const colorData = getCompleteColorStrategy(color, r, g, b);\n\n  if (colorData) {\n    const newColor = {\n      r: colorData.r,\n      g: colorData.g,\n      b: colorData.b,\n      a: colorData.a,\n      h: colorData.h,\n      s: colorData.s,\n      l: colorData.l,\n      initialValue: typeof color === \"string\" && colorData.format !== ColorFormat.HSV ? color : undefined,\n      roundA: Math.round(100 * colorData.a) / 100,\n      format: colorData.format,\n      mix: Color.mix,\n      toValue: () => Color.toRgbString(newColor)\n    };\n    return newColor;\n  } else {\n    return undefined;\n  }\n}\n/**\n * @public\n */\n\n\n(function (Color) {\n  /**\n   * Formats a Color object into a readable string for debugging.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.inspect(blue)\n   * ```\n   *\n   * @param color - The Color object to format\n   * @param initialValue - A canonical hex string to be used instead of an rgba() value.\n   */\n  function inspect(color, initialValue) {\n    if (color.format === ColorFormat.HSL) {\n      return `<${color.constructor.name} h:${color.h} s:${color.s} l:${color.l} a:${color.a}>`;\n    } else if (color.format === ColorFormat.HEX || color.format === ColorFormat.NAME) {\n      return `<${color.constructor.name} \"${initialValue}\">`;\n    } else {\n      return `<${color.constructor.name} r:${color.r} g:${color.g} b:${color.b} a:${color.a}>`;\n    }\n  }\n\n  Color.inspect = inspect;\n  /**\n   * Checks if the value is a valid color object or color string. Returns true or false.\n   *\n   * @remarks\n   * ```jsx\n   * Color.isColor(\"#0099FF\") // true\n   * Color.isColor(Color(\"#0099FF\")) // true\n   * ```\n   *\n   * @param color - The potential color value to validate\n   */\n\n  function isColor(color) {\n    if (typeof color === \"string\") {\n      return Color.isColorString(color);\n    } else {\n      return Color.isColorObject(color);\n    }\n  }\n\n  Color.isColor = isColor;\n  /**\n   * Checks if the value is a valid color string. Returns true or false.\n   *\n   * @remarks\n   * ```jsx\n   * Color.isColorString(\"#0099FF\") // true\n   * ```\n   *\n   * @param color - A string representing a color\n   */\n\n  function isColorString(colorString) {\n    if (typeof colorString === \"string\") {\n      return stringToObject(colorString) !== false;\n    }\n\n    return false;\n  }\n\n  Color.isColorString = isColorString;\n  /**\n   * Checks if the value is a valid Color object. Returns true or false.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.isColorObject(blue) // true\n   * Color.isColorObject(\"#0099FF\") // false\n   * ```\n   *\n   * @param color - An object representing a color.\n   */\n\n  function isColorObject(color) {\n    return color && typeof color !== \"string\" && typeof color.r === \"number\" && typeof color.g === \"number\" && typeof color.b === \"number\" && typeof color.h === \"number\" && typeof color.s === \"number\" && typeof color.l === \"number\" && typeof color.a === \"number\" && typeof color.roundA === \"number\" && typeof color.format === \"string\";\n  }\n\n  Color.isColorObject = isColorObject;\n  /**\n   * Formats a Color instance into an RGB string.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toString(blue) // \"rgb(0, 153, 255)\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n\n  function toString(color) {\n    return Color.toRgbString(color);\n  }\n\n  Color.toString = toString;\n  /**\n   * Formats a Color instance into an hexidecimal value.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHex(blue) // \"0099FF\"\n   * Color.toHex(Color(\"#FFAAFF\"), true) // \"FAF\"\n   * ```\n   *\n   * @param color - The color to format\n   * @param allow3Char - If true will return short hand colors if possible (defaults to false).\n   */\n\n  function toHex(color) {\n    let allow3Char = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return rgbToHex(color.r, color.g, color.b, allow3Char);\n  }\n\n  Color.toHex = toHex;\n  /**\n   * Formats a Color instance into an hexidecimal string.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHexString(blue) // \"#0099FF\"\n   * Color.toHexString(Color(\"#FFAAFF\"), true) // \"#FAF\"\n   * ```\n   *\n   * @param color - The color to format\n   * @param allow3Char - If true will return short hand colors if possible (defaults to false).\n   */\n\n  function toHexString(color) {\n    let allow3Char = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return `#${Color.toHex(color, allow3Char)}`;\n  }\n\n  Color.toHexString = toHexString;\n  /**\n   * Formats a Color instance into an RGB string.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toRgbString(blue) // \"rgb(0, 153, 255)\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n\n  function toRgbString(color) {\n    return color.a === 1 ? \"rgb(\" + Math.round(color.r) + \", \" + Math.round(color.g) + \", \" + Math.round(color.b) + \")\" : \"rgba(\" + Math.round(color.r) + \", \" + Math.round(color.g) + \", \" + Math.round(color.b) + \", \" + color.roundA + \")\";\n  }\n\n  Color.toRgbString = toRgbString;\n  /**\n   * Formats a Color instance into an HUSL object.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHusl(blue) // {h: 250, s: 100, l: 50, a: 1}\n   * ```\n   *\n   * @param color - The color to format\n   */\n\n  function toHusl(color) {\n    return { ...rgbToHsluv(color.r, color.g, color.b),\n      a: color.roundA\n    };\n  }\n\n  Color.toHusl = toHusl;\n  /**\n   * Formats a Color instance into an HSL string.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHslString(blue) // \"hsl(204, 100%, 50%)\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n\n  function toHslString(color) {\n    const hsl = Color.toHsl(color);\n    const h = Math.round(hsl.h);\n    const s = Math.round(hsl.s * 100);\n    const l = Math.round(hsl.l * 100);\n    return color.a === 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + color.roundA + \")\";\n  }\n\n  Color.toHslString = toHslString;\n  /**\n   * Formats a Color instance into an HSV object.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHsv(blue) // {h: 204, s: 1, v: 1, a: 1}\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n\n  function toHsv(color) {\n    const hsv = rgbToHsv(color.r, color.g, color.b);\n    return {\n      h: hsv.h * 360,\n      s: hsv.s,\n      v: hsv.v,\n      a: color.a\n    };\n  }\n\n  Color.toHsv = toHsv;\n  /**\n   * Formats a Color instance into an HSV string.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHslString(blue) // \"hsv(204, 100%, 50%)\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n\n  function toHsvString(color) {\n    const hsv = rgbToHsv(color.r, color.g, color.b);\n    const h = Math.round(hsv.h * 360);\n    const s = Math.round(hsv.s * 100);\n    const v = Math.round(hsv.v * 100);\n    return color.a === 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + color.roundA + \")\";\n  }\n\n  Color.toHsvString = toHsvString;\n  /**\n   * Formats a Color instance into {@link https://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/ | CSS name}\n   * or returns false if unspecified.\n   *\n   * @remarks\n   * ```jsx\n   * const green = Color(\"#8FBC8F\")\n   *\n   * Color.toName(green) // \"darkseagreen\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n\n  function toName(color) {\n    if (color.a === 0) {\n      return \"transparent\";\n    }\n\n    if (color.a < 1) {\n      return false;\n    }\n\n    const hex = rgbToHex(color.r, color.g, color.b, true);\n\n    for (const key of Object.keys(cssNames)) {\n      const value = cssNames[key];\n\n      if (value === hex) {\n        return key;\n      }\n    }\n\n    return false;\n  }\n\n  Color.toName = toName;\n  /**\n   * Formats a color into an HSL object.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHsl(blue) // {h: 204, s: 1, l: 0.5, a: 1}\n   * ```\n   *\n   * @param color - The color to format\n   */\n\n  function toHsl(color) {\n    return {\n      h: Math.round(color.h),\n      s: color.s,\n      l: color.l,\n      a: color.a\n    };\n  }\n\n  Color.toHsl = toHsl;\n  /**\n   * Formats a color into an RGB object.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toRgb(blue) // {r: 40, g: 175, b: 250, a: 1}\n   * ```\n   *\n   * @param color - The color to format\n   */\n\n  function toRgb(color) {\n    return {\n      r: Math.round(color.r),\n      g: Math.round(color.g),\n      b: Math.round(color.b),\n      a: color.a\n    };\n  }\n\n  Color.toRgb = toRgb;\n  /**\n   * Returns a brightened color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const brightblue = Color.lighten(blue, 20)\n   * ```\n   *\n   * @param color - The color to brighten\n   * @param amount - A number, from 0 to 100. Set to 10 by default.\n   */\n\n  function brighten(color) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    const rgb = Color.toRgb(color);\n    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n    return Color(rgb);\n  }\n\n  Color.brighten = brighten;\n  /**\n   * Add white and return a lightened color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const lightblue = Color.lighten(blue, 20)\n   * ```\n   *\n   * @param color - The color to lighten\n   * @param amount - A number, from 0 to 100. Set to 10 by default.\n   */\n\n  function lighten(color) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    const hsl = Color.toHsl(color);\n    hsl.l += amount / 100;\n    hsl.l = Math.min(1, Math.max(0, hsl.l));\n    return Color(hsl);\n  }\n\n  Color.lighten = lighten;\n  /**\n   * Add black and return a darkened color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const darkblue = Color.darken(blue, 20)\n   * ```\n   * @param color - The color to darken.\n   * @param amount - A number, from 0 to 100. Set to 10 by default.\n   */\n\n  function darken(color) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    const hsl = Color.toHsl(color);\n    hsl.l -= amount / 100;\n    hsl.l = Math.min(1, Math.max(0, hsl.l));\n    return Color(hsl);\n  }\n\n  Color.darken = darken;\n  /**\n   * Increase the saturation of a color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const saturated = Color.saturate(blue, 100)\n   * ```\n   * @param color - The color to modify\n   * @param amount - A number from 0 to 100. Set to 10 by default.\n   */\n\n  function saturate(color) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    const hsl = Color.toHsl(color);\n    hsl.s += amount / 100;\n    hsl.s = Math.min(1, Math.max(0, hsl.s));\n    return Color(hsl);\n  }\n\n  Color.saturate = saturate;\n  /**\n   * Decrease the saturation of a color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const desaturated = Color.desaturate(blue, 100)\n   * ```\n   * @param color - The color to modify\n   * @param amount - A number from 0 to 100. Set to 10 by default.\n   */\n\n  function desaturate(color) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    const hsl = Color.toHsl(color);\n    hsl.s -= amount / 100;\n    hsl.s = Math.min(1, Math.max(0, hsl.s));\n    return Color(hsl);\n  }\n\n  Color.desaturate = desaturate;\n  /**\n   * Return a fully desaturated color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const gray = Color.grayscale(blue)\n   * ```\n   * @param color - The color to convert.\n   */\n\n  function grayscale(color) {\n    return Color.desaturate(color, 100);\n  }\n\n  Color.grayscale = grayscale;\n  /**\n   * Returns a new color for the rotated hue.\n   * @param color - The color to manipulate\n   * @param angle - The angle in degrees in which to rotate the hue.\n   */\n\n  function hueRotate(color, angle) {\n    const hsl = Color.toHsl(color);\n    hsl.h += angle;\n    hsl.h = hsl.h > 360 ? hsl.h - 360 : hsl.h;\n    return Color(hsl);\n  }\n\n  Color.hueRotate = hueRotate;\n  /**\n   * Set the alpha value, also known as opacity, of the color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * const transparent = Color.alpha(blue, 0.1)\n   * ```\n   * @param color - The original color to modify.\n   * @param alpha - A number from 1 to 0. Set to 1 by default.\n   */\n\n  function alpha(color) {\n    let a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return Color({\n      r: color.r,\n      g: color.g,\n      b: color.b,\n      a: a\n    });\n  }\n\n  Color.alpha = alpha;\n  /**\n   * Set the alpha value, also known as opacity, of the color to zero.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * const transparent = Color.alpha(blue)\n   * ```\n   * @param color - The original color to modify.\n   */\n\n  function transparent(color) {\n    return Color.alpha(color, 0);\n  }\n\n  Color.transparent = transparent;\n  /**\n   * Change the alpha value, also know as opacity, by a multiplier.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const transparent = Color.multiplyAlpha(blue, 0.5)\n   * ```\n   * @param color - The original color to modify.\n   * @param alphaValue - A number between 1 and 0, defaults to 1,\n   */\n\n  function multiplyAlpha(color) {\n    let alphaValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return Color({\n      r: color.r,\n      g: color.g,\n      b: color.b,\n      a: color.a * alphaValue\n    });\n  }\n\n  Color.multiplyAlpha = multiplyAlpha;\n  /**\n   * Returns a function that can be used to transition a color from one value\n   * to another. By default this will use the RGB `mix` model. Useful for providing to animation tools.\n   *\n   * ```jsx\n   * const blend = Color.interpolate(Color(\"red\"), Color(\"blue\"))\n   *\n   * blend(0)   // Initial state (red)\n   * blend(0.5) // Mid state (purple)\n   * blend(1)   // Final state (blue)\n   * ```\n   * @param colorA - The starting color\n   * @param colorB - The final color\n   * @param model  - The model to use for the mix. One of {@link ColorMixModelType}\n   */\n\n  function interpolate(colorA, colorB) {\n    let model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorMixModelType.RGB;\n\n    if (!Color.isColorObject(colorA) || !Color.isColorObject(colorB)) {\n      throw new TypeError(\"Both arguments for Color.interpolate must be Color objects\");\n    }\n\n    return progress => {\n      const color = Color.mixAsColor(colorA, colorB, progress, false, model);\n      return color;\n    };\n  }\n\n  Color.interpolate = interpolate;\n  /**\n   * Create a function that will mix two colors together and output the result as an rgb string.\n   *\n   * @param colorA - The starting color\n   * @param colorB - The final color\n   * @param options - Options for the color mixer\n   *\n   * - `model`: The model to use for the mix. One of {@link ColorMixModelType}\n   *\n   * @public\n   */\n\n  function mix(from, toColor) {\n    let {\n      model = ColorMixModelType.RGB\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const fromColor = typeof from === \"string\" ? Color(from) : from;\n    const mixer = Color.interpolate(fromColor, toColor, model);\n    return p => Color.toRgbString(mixer(p));\n  }\n\n  Color.mix = mix;\n  /**\n   * Blend two colors together, optionally based on user input. The fraction defines the\n   * distribution between the two colors, and is set to 0.5 by default.\n   * The `limit` defines if the color can transition beyond its range.\n   * @remarks\n   * ```jsx\n   * // Mix red with yellow\n   * const orange = Color.mix(\"red\", \"yellow\", 0.5)\n   * ```\n   *\n   * ```jsx\n   * Color.mix(\"red\", \"yellow\", 0.5, true, \"husl\")\n   * ```\n   *\n   * @param colorA   - A color, the first one.\n   * @param colorB   - A color, the second one.\n   * @param fraction - An optional number, from 0 to 1, set to 0.5 by default.\n   * @param limit    - An optional boolean, set to false by default.\n   * @param model    - The model to use for the mix. One of {@link ColorMixModelType}\n   */\n\n  function mixAsColor(colorA, colorB) {\n    let fraction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;\n    let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let model = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : ColorMixModelType.RGB;\n    let result = null;\n\n    if (ColorMixModel.isRGB(model)) {\n      // rgb model\n      result = Color({\n        r: modulate(fraction, [0, 1], [colorA.r, colorB.r], limit),\n        g: modulate(fraction, [0, 1], [colorA.g, colorB.g], limit),\n        b: modulate(fraction, [0, 1], [colorA.b, colorB.b], limit),\n        a: modulate(fraction, [0, 1], [colorA.a, colorB.a], limit)\n      });\n    } else {\n      let hslA, hslB;\n\n      if (ColorMixModel.isHSL(model)) {\n        // hsl model\n        hslA = Color.toHsl(colorA);\n        hslB = Color.toHsl(colorB);\n      } else {\n        // husl model\n        hslA = Color.toHusl(colorA);\n        hslB = Color.toHusl(colorB);\n      }\n\n      if (hslA.s === 0) {\n        hslA.h = hslB.h;\n      } else if (hslB.s === 0) {\n        hslB.h = hslA.h;\n      }\n\n      const fromH = hslA.h;\n      const toH = hslB.h;\n      let deltaH = toH - fromH;\n\n      if (deltaH > 180) {\n        deltaH = toH - 360 - fromH;\n      } else if (deltaH < -180) {\n        deltaH = toH + 360 - fromH;\n      }\n\n      const tween = {\n        h: modulate(fraction, [0, 1], [fromH, fromH + deltaH], limit),\n        s: modulate(fraction, [0, 1], [hslA.s, hslB.s], limit),\n        l: modulate(fraction, [0, 1], [hslA.l, hslB.l], limit),\n        a: modulate(fraction, [0, 1], [colorA.a, colorB.a], limit)\n      };\n\n      if (ColorMixModel.isHSL(model)) {\n        // hsl model\n        result = Color(tween);\n      } else {\n        // husl model\n        result = Color(rgbaFromHusl(tween.h, tween.s, tween.l, tween.a));\n      }\n    }\n\n    return result;\n  }\n\n  Color.mixAsColor = mixAsColor;\n  /**\n   * Returns a Color instance with a random color value set.\n   *\n   * @remarks\n   * ```jsx\n   * const random = Color.random()\n   * ```\n   *\n   * @param alphaValue - An optional alpha value, set to 1 by default.\n   */\n\n  function random() {\n    let alphaValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    function gen() {\n      return Math.floor(Math.random() * 255);\n    }\n\n    return Color(\"rgba(\" + gen() + \", \" + gen() + \", \" + gen() + \", \" + alphaValue + \")\");\n  }\n\n  Color.random = random;\n  /**\n   * Creates a greyscale color.\n   *\n   * @remarks\n   * ```jsx\n   * const gray = Color.gray(0.5)\n   * ```\n   *\n   * @param amount - A number from 0 to 1 representing the amount of white.\n   * @param alphaValue  - A number from 0 to 1 representing the alpha. Set to 1 by default.\n   */\n\n  function grey() {\n    let amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n    let alphaValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    amount = Math.floor(amount * 255);\n    return Color(\"rgba(\" + amount + \", \" + amount + \", \" + amount + \", \" + alphaValue + \")\");\n  }\n\n  Color.grey = grey;\n  /**\n   * @internal\n   * Alias for {@link (Color:namespace).grey}\n   */\n\n  Color.gray = Color.grey;\n  /** @internal */\n\n  function rgbToHsl(r, g, b) {\n    return rgbToHslConverter(r, g, b);\n  }\n\n  Color.rgbToHsl = rgbToHsl;\n  /** @internal */\n\n  Color.isValidColorProperty = function (name, value) {\n    const isColorKey = name.toLowerCase().slice(-5) === \"color\" || name === \"fill\" || name === \"stroke\";\n\n    if (isColorKey && typeof value === \"string\" && Color.isColorString(value)) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Calculates the color difference using {@link https://en.wikipedia.org/wiki/Color_difference#Euclidean |\n   * Euclidean distance fitting human perception}. Returns a value between 0 and 765\n   * @param colorA - A first color.\n   * @param colorB - A second color.\n   */\n\n\n  function difference(colorA, colorB) {\n    const _r = (colorA.r + colorB.r) / 2;\n\n    const deltaR = colorA.r - colorB.r;\n    const deltaG = colorA.g - colorB.g;\n    const deltaB = colorA.b - colorB.b;\n    const deltaR2 = Math.pow(deltaR, 2);\n    const deltaG2 = Math.pow(deltaG, 2);\n    const deltaB2 = Math.pow(deltaB, 2);\n    return Math.sqrt(2 * deltaR2 + 4 * deltaG2 + 3 * deltaB2 + _r * (deltaR2 - deltaB2) / 256);\n  }\n\n  Color.difference = difference;\n  /**\n   * Checks whether two Color objects are equal.\n   *\n   * @remarks\n   * ```jsx\n   * Color.equal(Color(\"red\"), Color(\"red\"))  // true\n   * Color.equal(Color(\"red\"), Color(\"blue\")) // false\n   *\n   * Color.equal(Color(\"#0099FF\"), Color(\"009AFF\"))    // false\n   * Color.equal(Color(\"#0099FF\"), Color(\"009AFF\"), 2) // true\n   * ```\n   *\n   * @param colorA    - The first color\n   * @param colorB    - The second color\n   * @param tolerance - A tolerance for the difference between rgba values. Set to 0.1 by default.\n   */\n\n  function equal(colorA, colorB) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n\n    if (Math.abs(colorA.r - colorB.r) >= tolerance) {\n      return false;\n    }\n\n    if (Math.abs(colorA.g - colorB.g) >= tolerance) {\n      return false;\n    }\n\n    if (Math.abs(colorA.b - colorB.b) >= tolerance) {\n      return false;\n    }\n\n    if (Math.abs(colorA.a - colorB.a) * 256 >= tolerance) {\n      return false;\n    }\n\n    return true;\n  }\n\n  Color.equal = equal;\n})(Color || (Color = {}));\n\nconst ColorMixModel = {\n  isRGB(colorModel) {\n    return colorModel === ColorMixModelType.RGB || colorModel === ColorMixModelType.RGBA;\n  },\n\n  isHSL(colorModel) {\n    return colorModel === ColorMixModelType.HSL || colorModel === ColorMixModelType.HSLA;\n  }\n\n}; // helpers\n\nfunction getCompleteColorStrategy(colorOrR, g, b) {\n  let a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  let completeColor; // RGB arguments have higher priority\n\n  if (typeof colorOrR === \"number\" && !Number.isNaN(colorOrR) && typeof g === \"number\" && !Number.isNaN(g) && typeof b === \"number\" && !Number.isNaN(b)) {\n    // color used as red - Color(255, 255, 255)\n    const _r = colorOrR;\n    const _g = g;\n    const _b = b;\n    const _a = a;\n    completeColor = getCompleteColorFromRGB({\n      r: _r,\n      g: _g,\n      b: _b,\n      a: _a\n    });\n  } else if (typeof colorOrR === \"string\") {\n    // valid CSS color (including functions)\n    completeColor = getCompleteColorFromString(colorOrR);\n  } else if (typeof colorOrR === \"object\") {\n    // eslint-disable-next-line no-prototype-builtins\n    if (colorOrR.hasOwnProperty(\"r\") && colorOrR.hasOwnProperty(\"g\") && colorOrR.hasOwnProperty(\"b\")) {\n      completeColor = getCompleteColorFromRGB(colorOrR);\n    } else {\n      completeColor = getCompleteColorFromHSL(colorOrR);\n    }\n  }\n\n  return completeColor;\n}\n\nfunction getCompleteColorFromString(color) {\n  const result = stringToObject(color);\n\n  if (result) {\n    if (result.format === ColorFormat.HSL) {\n      return getCompleteColorFromHSL(result);\n    } else if (result.format === ColorFormat.HSV) {\n      return getCompleteColorFromHSV(result);\n    } else {\n      return getCompleteColorFromRGB(result);\n    }\n  }\n}\n\nfunction getCompleteColorFromHSV(color) {\n  const rgb = hsvToRgb(color.h, color.s, color.v);\n  const hsl = rgbToHslConverter(rgb.r, rgb.g, rgb.b);\n  return { ...hsl,\n    ...rgb,\n    format: ColorFormat.RGB,\n    a: color.a !== undefined ? correctAlpha(color.a) : 1\n  };\n}\n\nfunction getCompleteColorFromRGB(color) {\n  const rgb = rgbToRgb(color.r, color.g, color.b);\n  const hsl = rgbToHslConverter(rgb.r, rgb.g, rgb.b);\n  return { ...hsl,\n    ...rgb,\n    format: ColorFormat.RGB,\n    a: color.a !== undefined ? correctAlpha(color.a) : 1\n  };\n}\n\nfunction getCompleteColorFromHSL(color) {\n  let h;\n  let s;\n  let l;\n  let rgb = {\n    r: 0,\n    g: 0,\n    b: 0\n  };\n  let hsl = {\n    h: 0,\n    s: 0,\n    l: 0\n  };\n  h = isNumeric(color.h) ? color.h : 0;\n  h = (h + 360) % 360;\n  s = isNumeric(color.s) ? color.s : 1;\n\n  if (typeof color.s === \"string\") {\n    s = numberFromString(color.s);\n  }\n\n  l = isNumeric(color.l) ? color.l : 0.5;\n\n  if (typeof color.l === \"string\") {\n    l = numberFromString(color.l);\n  }\n\n  rgb = hslToRgb(h, s, l);\n  hsl = {\n    h: h,\n    s: s,\n    l: l\n  };\n  return { ...rgb,\n    ...hsl,\n    a: color.a === undefined ? 1 : color.a,\n    format: ColorFormat.HSL\n  };\n}\n\nfunction correctAlpha(alphaValue) {\n  alphaValue = parseFloat(alphaValue);\n\n  if (alphaValue < 0) {\n    alphaValue = 0;\n  }\n\n  if (isNaN(alphaValue) || alphaValue > 1) {\n    alphaValue = 1;\n  }\n\n  return alphaValue;\n}","map":{"version":3,"mappings":"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","names":["modulate","isNumeric","numberFromString","rgbToRgb","rgbToHsl","rgbToHslConverter","hslToRgb","rgbToHex","rgbToHsluv","rgbToHsv","rgbaFromHusl","stringToObject","hsvToRgb","ColorFormat","ColorMixModelType","cssNames","Color","cache","Map","color","r","g","b","c","get","createColor","undefined","isValid","set","created","colorData","getCompleteColorStrategy","newColor","a","h","s","l","initialValue","format","HSV","roundA","Math","round","mix","toValue","toRgbString","inspect","HSL","constructor","name","HEX","NAME","isColor","isColorString","isColorObject","colorString","toString","toHex","allow3Char","toHexString","toHusl","toHslString","hsl","toHsl","toHsv","hsv","v","toHsvString","toName","hex","key","Object","keys","value","toRgb","brighten","amount","rgb","max","min","lighten","darken","saturate","desaturate","grayscale","hueRotate","angle","alpha","transparent","multiplyAlpha","alphaValue","interpolate","colorA","colorB","model","RGB","TypeError","progress","mixAsColor","from","toColor","fromColor","mixer","p","fraction","limit","result","ColorMixModel","isRGB","hslA","hslB","isHSL","fromH","toH","deltaH","tween","random","gen","floor","grey","isColorKey","toLowerCase","slice","difference","_r","deltaR","deltaG","deltaB","deltaR2","pow","deltaG2","deltaB2","sqrt","equal","tolerance","abs","colorModel","RGBA","HSLA","colorOrR","completeColor","Number","isNaN","_g","_b","_a","getCompleteColorFromRGB","getCompleteColorFromString","hasOwnProperty","getCompleteColorFromHSL","getCompleteColorFromHSV","correctAlpha","parseFloat"],"sources":["../../../../src/render/types/Color/Color.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}