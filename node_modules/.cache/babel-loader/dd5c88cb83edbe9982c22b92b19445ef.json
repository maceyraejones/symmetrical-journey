{"ast":null,"code":"import { TypefaceSourceNames } from \"./types.js\";\nimport { typefaces as systemTypefaces, typefaceAliases } from \"./fonts.js\";\nimport { safeNavigator } from \"../../utils/safeNavigator.js\";\n/** @internal */\n\nexport const systemTypefaceName = \"System Default\";\n/** @internal */\n\nexport class LocalFontSource {\n  name = TypefaceSourceNames.Local;\n  typefaces = [];\n  byFamily = new Map();\n  typefaceAliasBySelector = new Map();\n  typefaceAliases = new Map();\n\n  getTypefaceByFamily(family) {\n    return this.byFamily.get(family) ?? null;\n  } // TODO: these are duplicated across implementations of FontSource\n  // When adding a third source, we should abstract them\n\n\n  createTypeface(family) {\n    const typeface = {\n      family: family,\n      fonts: [],\n      source: this.name\n    };\n    this.addTypeface(typeface);\n    return typeface;\n  }\n\n  addTypeface(typeface) {\n    this.typefaces.push(typeface);\n    this.byFamily.set(typeface.family, typeface);\n  } // end of duplication\n\n\n  importFonts() {\n    const fonts = [];\n\n    for (const family of Object.keys(systemTypefaces)) {\n      const members = systemTypefaces[family];\n      if (!members) continue;\n      const typeface = this.createTypeface(family);\n\n      for (const variant of Object.keys(members)) {\n        const member = members[variant];\n        if (!member) continue;\n        const {\n          selector,\n          weight\n        } = member; // font.style is never defined in local fonts, we always use a specific font family that already includes the style\n\n        const font = {\n          variant,\n          selector,\n          weight,\n          typeface,\n          status: \"loaded\"\n        };\n        typeface.fonts.push(font);\n      }\n\n      fonts.push(...typeface.fonts);\n    }\n\n    for (const [key, value] of Object.entries(typefaceAliases)) {\n      this.addTypefaceAlias(key, value);\n    }\n\n    const {\n      typeface: systemTypeface,\n      aliases\n    } = this.getSystemTypeface();\n    this.addTypeface(systemTypeface);\n\n    for (const [key, value] of aliases) {\n      this.addTypefaceAlias(key, value);\n    }\n\n    fonts.push(...systemTypeface.fonts);\n    const interTypeface = this.importInterTypeface();\n    fonts.push(...interTypeface.fonts);\n    return fonts;\n  }\n\n  interTypefaceSelectors = new Set();\n\n  importInterTypeface() {\n    const inter = [[\"Regular\", \"Inter\", undefined], [\"Thin\", \"Inter-Thin\", 100], [\"Extra Light\", \"Inter-ExtraLight\", 200], [\"Light\", \"Inter-Light\", 300], [\"Medium\", \"Inter-Medium\", 500], [\"Semibold\", \"Inter-SemiBold\", 600], [\"Bold\", \"Inter-Bold\", 700], [\"Extra Bold\", \"Inter-ExtraBold\", 800], [\"Black\", \"Inter-Black\", 900], [\"Thin Italic\", \"Inter-ThinItalic\", 100], [\"Extra Light Italic\", \"Inter-ExtraLightItalic\", 300], [\"Light Italic\", \"Inter-LightItalic\", 300], [\"Italic\", \"Inter-Italic\", undefined], [\"Medium Italic\", \"Inter-MediumItalic\", 500], [\"Semibold Italic\", \"Inter-SemiBoldItalic\", 600], [\"Bold Italic\", \"Inter-BoldItalic\", 700], [\"Extra Bold Italic\", \"Inter-ExtraBoldItalic\", 800], [\"Black Italic\", \"Inter-BlackItalic\", 900]];\n    const typeface = this.createTypeface(\"Inter\");\n\n    for (const entry of inter) {\n      const [variant, selector, weight] = entry;\n      const font = {\n        variant,\n        selector,\n        weight,\n        typeface,\n        style: /italic/i.test(selector) ? \"italic\" : undefined\n      };\n      typeface.fonts.push(font);\n    }\n\n    typeface.fonts.forEach(t => this.interTypefaceSelectors.add(t.selector));\n    return typeface;\n  }\n\n  addTypefaceAlias(key, value) {\n    this.typefaceAliases.set(key, value);\n    this.typefaceAliasBySelector.set(value, key);\n  }\n\n  getSystemTypeface() {\n    const fontFamilies = this.workaroundChrome81and82( // System fonts - Taken from https://furbo.org/stuff/systemfonts-new.html - \"All Platforms\" section\n    \"system-ui|-apple-system|BlinkMacSystemFont|Segoe UI|Roboto|Oxygen|Ubuntu|Cantarell|Fira Sans|Droid Sans|Helvetica Neue|sans-serif\");\n    const typeface = {\n      family: systemTypefaceName,\n      fonts: [],\n      source: this.name\n    };\n    const aliases = new Map();\n    const weights = [400, 100, 200, 300, 500, 600, 700, 800, 900];\n    const styles = [\"normal\", \"italic\"];\n\n    for (const style of styles) {\n      for (const weight of weights) {\n        const variant = createVariantName(weight, style);\n        const alias = `__SystemDefault-${weight}-${style}__`;\n        const font = {\n          variant,\n          selector: alias,\n          style: style === \"normal\" ? undefined : style,\n          weight: weight === 400 ? undefined : weight,\n          typeface,\n          status: \"loaded\"\n        };\n        typeface.fonts.push(font);\n        aliases.set(alias, fontFamilies);\n      }\n    }\n\n    return {\n      typeface,\n      aliases\n    };\n  }\n\n  getTypefaceAliasBySelector(selector) {\n    return this.typefaceAliasBySelector.get(selector) || null;\n  }\n\n  getTypefaceSelectorByAlias(alias) {\n    return this.typefaceAliases.get(alias) || null;\n  }\n  /** Typeface aliases are in the format of `__Alias-Name__` */\n\n\n  isTypefaceAlias(value) {\n    if (value && value.match(/^__.*__$/)) return true;\n    return false;\n  }\n  /**\n   * Use 'Inter' web font as System Default fonts on Mac with Chrome v81 v82\n   * https://github.com/framer/company/issues/17277\n   * https://bugs.chromium.org/p/chromium/issues/detail?id=1057654\n   */\n\n\n  workaroundChrome81and82(s) {\n    if (safeNavigator) {\n      const userAgent = safeNavigator.userAgent;\n      if (!userAgent.includes(\"Mac OS X 10_15\")) return s;\n      if (!userAgent.includes(\"Chrome/81\") && !userAgent.includes(\"Chrome/82\")) return s;\n    }\n\n    return `Inter|${s}`;\n  }\n\n}\nconst fontWeightNames = {\n  \"100\": \"Thin\",\n  \"200\": \"Extra Light\",\n  \"300\": \"Light\",\n  \"400\": \"Normal\",\n  \"500\": \"Medium\",\n  \"600\": \"Semi Bold\",\n  \"700\": \"Bold\",\n  \"800\": \"Extra Bold\",\n  \"900\": \"Black\"\n};\n\nfunction createVariantName(weight, style) {\n  const friendlyStyle = style === \"normal\" ? \"Regular\" : \"Italic\";\n\n  if (weight === 400) {\n    return friendlyStyle;\n  }\n\n  if (style !== \"normal\") {\n    return `${fontWeightNames[weight]} ${friendlyStyle}`;\n  }\n\n  return `${fontWeightNames[weight]}`;\n}","map":{"version":3,"mappings":"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","names":["TypefaceSourceNames","typefaces","systemTypefaces","typefaceAliases","safeNavigator","systemTypefaceName","LocalFontSource","name","Local","byFamily","Map","typefaceAliasBySelector","getTypefaceByFamily","family","get","createTypeface","typeface","fonts","source","addTypeface","push","set","importFonts","Object","keys","members","variant","member","selector","weight","font","status","key","value","entries","addTypefaceAlias","systemTypeface","aliases","getSystemTypeface","interTypeface","importInterTypeface","interTypefaceSelectors","Set","inter","undefined","entry","style","test","forEach","t","add","fontFamilies","workaroundChrome81and82","weights","styles","createVariantName","alias","getTypefaceAliasBySelector","getTypefaceSelectorByAlias","isTypefaceAlias","match","s","userAgent","includes","fontWeightNames","friendlyStyle"],"sources":["../../../src/render/fonts/LocalFontSource.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}