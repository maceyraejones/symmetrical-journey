{"ast":null,"code":"import { TypefaceSourceNames } from \"./types.js\";\nexport const customFontSelectorPrefix = \"CUSTOM;\";\n/**\n * Parses and returns the custom font filename if no properties were provided.\n * With properties provided, the preferred family and sub family are chosen over the base font family.\n * */\n\nfunction getCustomFontName(fileName, properties) {\n  if (!properties) return fileName.substring(0, fileName.lastIndexOf(\".\"));\n  const fontFamily = properties.font.preferredFamily === \"\" ? properties.font.fontFamily : properties.font.preferredFamily; // This variant can be used for custom font grouping\n\n  const variant = properties.font.preferredSubFamily === \"\" ? properties.font.fontSubFamily : properties.font.preferredSubFamily;\n  return `${fontFamily} ${variant}`;\n}\n/** @internal */\n\n\nexport class CustomFontSource {\n  name = TypefaceSourceNames.Custom;\n  typefaces = [];\n  byFamily = new Map();\n  assetsByFamily = new Map();\n\n  importFonts(assets) {\n    this.typefaces.length = 0;\n    this.byFamily.clear();\n    this.assetsByFamily.clear();\n    const fonts = [];\n    assets.forEach(asset => {\n      if (!this.isValidCustomFontAsset(asset)) {\n        return;\n      }\n\n      const fontName = getCustomFontName(asset.name, asset.properties);\n      const typeface = this.createTypeface(fontName);\n      const font = {\n        typeface,\n        selector: `${customFontSelectorPrefix}${fontName}`,\n        variant: this.inferVariantName(fontName),\n        postscriptName: asset.properties?.font.postscriptName,\n        file: asset.url\n      };\n      typeface.fonts.push(font);\n      typeface.owner = asset.ownerType === \"team\" ? \"team\" : \"project\";\n      this.assetsByFamily.set(fontName, asset);\n      fonts.push(...typeface.fonts);\n    });\n    return fonts;\n  }\n\n  isValidCustomFontAsset(asset) {\n    if (!asset.mimeType.startsWith(\"font/\")) return false;\n    if (asset.properties?.kind !== \"font\") return false;\n    if (!asset.properties.font) return false;\n    return \"fontFamily\" in asset.properties.font;\n  }\n\n  inferVariantName(family) {\n    const possibleValues = [\"thin\", \"ultra light\", \"extra light\", \"light\", \"normal\", \"medium\", \"semi bold\", \"bold\", \"extra bold\", \"black\"];\n    const possibleValuesWithItalics = [...possibleValues.map(value => `${value} italic`), ...possibleValues];\n    const lowerCaseFamily = family.toLowerCase();\n    const tokens = [...lowerCaseFamily.split(\" \"), ...lowerCaseFamily.split(\"-\"), ...lowerCaseFamily.split(\"_\")];\n    const foundToken = possibleValuesWithItalics.find(value => tokens.includes(value) || tokens.includes(value.replace(/\\s+/g, \"\"))); // Return found token with each letter capitalized\n\n    if (foundToken) return foundToken.replace(/(^\\w|\\s\\w)/g, char => char.toUpperCase());\n    return \"Regular\";\n  }\n\n  createTypeface(family) {\n    const existingTypeface = this.byFamily.get(family);\n    if (existingTypeface) return existingTypeface;\n    const typeface = {\n      source: this.name,\n      family,\n      fonts: []\n    };\n    this.addTypeface(typeface);\n    return typeface;\n  }\n\n  addTypeface(typeface) {\n    this.typefaces.push(typeface);\n    this.byFamily.set(typeface.family, typeface);\n  }\n\n  parseSelector(selector) {\n    if (!selector.startsWith(customFontSelectorPrefix)) return null;\n    const tokens = selector.split(customFontSelectorPrefix);\n    const locator = {\n      source: \"custom\",\n      family: tokens[1]\n    };\n    return locator;\n  }\n\n  getFontBySelector(selector) {\n    let createFont = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const locator = this.parseSelector(selector);\n    if (!locator) return null;\n    if (!createFont && !this.byFamily.get(locator.family)) return null;\n    return this.getTypefaceByFamily(locator.family).fonts[0];\n  }\n\n  getTypefaceByFamily(family) {\n    const foundTypeface = this.byFamily.get(family);\n    if (foundTypeface) return foundTypeface;\n    const typeface = {\n      source: \"custom\",\n      family,\n      fonts: []\n    };\n    typeface.fonts.push({\n      selector: `${customFontSelectorPrefix}${family}`,\n      variant: this.inferVariantName(family),\n      typeface\n    });\n    return typeface;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TypefaceSourceNames","customFontSelectorPrefix","getCustomFontName","fileName","properties","substring","lastIndexOf","fontFamily","font","preferredFamily","variant","preferredSubFamily","fontSubFamily","CustomFontSource","name","Custom","typefaces","byFamily","Map","assetsByFamily","importFonts","assets","length","clear","fonts","forEach","asset","isValidCustomFontAsset","fontName","typeface","createTypeface","selector","inferVariantName","postscriptName","file","url","push","owner","ownerType","set","mimeType","startsWith","kind","family","possibleValues","possibleValuesWithItalics","map","value","lowerCaseFamily","toLowerCase","tokens","split","foundToken","find","includes","replace","char","toUpperCase","existingTypeface","get","source","addTypeface","parseSelector","locator","getFontBySelector","createFont","getTypefaceByFamily","foundTypeface"],"sources":["../../../src/render/fonts/CustomFontSource.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}