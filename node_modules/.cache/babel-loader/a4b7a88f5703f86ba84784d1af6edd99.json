{"ast":null,"code":"/**\n * @internal\n */\nexport function minZoomForPixelatedImageRendering(image, containerSize) {\n  let devicePixelRatio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let {\n    width: frameWidth,\n    height: frameHeight\n  } = containerSize;\n  const imageWidth = image.pixelWidth ?? image.intrinsicWidth ?? 0;\n  const imageHeight = image.pixelHeight ?? image.intrinsicHeight ?? 0; // Don't pixelate for nonsensical frames or images\n\n  if (frameWidth < 1 || frameHeight < 1 || imageWidth < 1 || imageHeight < 1) {\n    return undefined;\n  } // Account for device pixel density\n\n\n  frameWidth *= devicePixelRatio;\n  frameHeight *= devicePixelRatio; // At what zoom level do the image's pixels match 1:1 with a render of the image within the frame?\n\n  const frameAspectRatio = frameWidth / frameHeight;\n  const imageAspectRatio = imageWidth / imageHeight;\n\n  switch (image.fit) {\n    case \"fill\":\n      if (imageAspectRatio > frameAspectRatio) {\n        // Width will be cut off, height determines pixelation\n        return imageHeight / frameHeight;\n      } else {\n        // Height will be cut off, width determines pixelation\n        return imageWidth / frameWidth;\n      }\n\n    case \"fit\":\n    case \"stretch\":\n      // Pixelate once both image dimensions exceed frame size\n      return Math.max(imageWidth / frameWidth, imageHeight / frameHeight);\n  }\n}\n/**\n * @internal\n */\n\nexport function imageRenderingForZoom(zoom, minPixelatedZoom) {\n  if (minPixelatedZoom && Math.max(1, zoom) > minPixelatedZoom) {\n    return \"pixelated\";\n  }\n\n  return \"auto\";\n}","map":{"version":3,"mappings":"AAGA;;;AAGA,OAAM,SAAUA,iCAAV,CACFC,KADE,EAEFC,aAFE,EAGkB;AAAA,MAApBC,gBAAoB,uEAAD,CAAC;AAEpB,MAAI;AAAEC,SAAK,EAAEC,UAAT;AAAqBC,UAAM,EAAEC;AAA7B,MAA6CL,aAAjD;AAEA,QAAMM,UAAU,GAAGP,KAAK,CAACQ,UAAN,IAAoBR,KAAK,CAACS,cAA1B,IAA4C,CAA/D;AACA,QAAMC,WAAW,GAAGV,KAAK,CAACW,WAAN,IAAqBX,KAAK,CAACY,eAA3B,IAA8C,CAAlE,CALoB,CAOpB;;AACA,MAAIR,UAAU,GAAG,CAAb,IAAkBE,WAAW,GAAG,CAAhC,IAAqCC,UAAU,GAAG,CAAlD,IAAuDG,WAAW,GAAG,CAAzE,EAA4E;AACxE,WAAOG,SAAP;AACH,GAVmB,CAYpB;;;AACAT,YAAU,IAAIF,gBAAd;AACAI,aAAW,IAAIJ,gBAAf,CAdoB,CAgBpB;;AACA,QAAMY,gBAAgB,GAAGV,UAAU,GAAGE,WAAtC;AACA,QAAMS,gBAAgB,GAAGR,UAAU,GAAGG,WAAtC;;AAEA,UAAQV,KAAK,CAACgB,GAAd;AACI,SAAK,MAAL;AACI,UAAID,gBAAgB,GAAGD,gBAAvB,EAAyC;AACrC;AACA,eAAOJ,WAAW,GAAGJ,WAArB;AACH,OAHD,MAGO;AACH;AACA,eAAOC,UAAU,GAAGH,UAApB;AACH;;AACL,SAAK,KAAL;AACA,SAAK,SAAL;AACI;AACA,aAAOa,IAAI,CAACC,GAAL,CAASX,UAAU,GAAGH,UAAtB,EAAkCM,WAAW,GAAGJ,WAAhD,CAAP;AAZR;AAcH;AAED;;;;AAGA,OAAM,SAAUa,qBAAV,CAAgCC,IAAhC,EAA8CC,gBAA9C,EAAkF;AACpF,MAAIA,gBAAgB,IAAIJ,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYE,IAAZ,IAAoBC,gBAA5C,EAA8D;AAC1D,WAAO,WAAP;AACH;;AACD,SAAO,MAAP;AACH","names":["minZoomForPixelatedImageRendering","image","containerSize","devicePixelRatio","width","frameWidth","height","frameHeight","imageWidth","pixelWidth","intrinsicWidth","imageHeight","pixelHeight","intrinsicHeight","undefined","frameAspectRatio","imageAspectRatio","fit","Math","max","imageRenderingForZoom","zoom","minPixelatedZoom"],"sources":["../../../src/render/utils/imageRendering.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}