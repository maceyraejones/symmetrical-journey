{"ast":null,"code":"/**\n * The `RenderTarget` represents the current environment in which a component\n * is running. This is most commonly either the editor canvas in Framer or in\n * the generated preview window.\n *\n * @remarks\n * Code components can use the `RenderTarget.current()` method to check for\n * the environment within their components and vary rendering accordingly. The\n * most common case would be to improve performance while rendering in the\n * Framer canvas where components that take too long to render will be replaced\n * with a placeholder. The `RenderTarget.hasRestrictions()` method can be used\n * to check explicitly for this case.\n *\n * @public\n */\nexport var RenderTarget;\n\n(function (RenderTarget) {\n  /**\n   * The component is to be rendered for the Framer canvas.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   if (RenderTarget.current() === RenderTarget.canvas) {\n   *     return <CanvasComponent />\n   *   }\n   *   return <DefaultComponent />\n   * }\n   * ```\n   */\n  RenderTarget[\"canvas\"] = \"CANVAS\";\n  /**\n   * The component is to be rendered for export.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   if (RenderTarget.current() === RenderTarget.export) {\n   *     return <ExportComponent />\n   *   }\n   *   return <DefaultComponent />\n   * }\n   * ```\n   */\n\n  RenderTarget[\"export\"] = \"EXPORT\";\n  /**\n   * The component is to be rendered as a preview thumbnail, for example in the\n   * component panel.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   if (RenderTarget.current() === RenderTarget.thumbnail) {\n   *     return <Thumbnail />\n   *   }\n   *   return <DefaultComponent />\n   * }\n   * ```\n   */\n\n  RenderTarget[\"thumbnail\"] = \"THUMBNAIL\";\n  /**\n   * The component is being rendered in the preview window.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   React.useEffect(() => {\n   *     if (RenderTarget.current() === RenderTarget.preview) {\n   *       // Do something in preview.\n   *     }\n   *   })\n   *   return <DefaultComponent />\n   * }\n   * ```\n   */\n\n  RenderTarget[\"preview\"] = \"PREVIEW\";\n})(RenderTarget || (RenderTarget = {}));\n/**\n * @internal\n */\n\n\nexport const RenderEnvironment = {\n  imageBaseURL: \"\",\n  target: RenderTarget.preview,\n  zoom: 1\n};\n/**\n * This is used to temporarily execute a task in a different render environment (for example during export)\n * @internal\n */\n\nexport function executeInRenderEnvironment(customEnvironment, task) {\n  // Copy currentEnvironment\n  const previousEnvironment = Object.assign({}, RenderEnvironment); // Set the customEnvironment to the current environment\n\n  Object.assign(RenderEnvironment, customEnvironment);\n  const result = task(); // Reset the previous environment back on the currentEnvironment\n\n  Object.assign(RenderEnvironment, previousEnvironment);\n  return result;\n}\n/**\n * This function sets the global render environment Framer Core uses to render.\n * Because it sets global state, there should be only one thing responsable for calling it in every react app (e.g. Vekter and Preview)\n * @internal\n */\n\nexport function setGlobalRenderEnvironment(environment) {\n  Object.assign(RenderEnvironment, environment);\n}\n/**\n * @internal\n */\n\nexport function useRenderEnvironment(target, imageBaseURL, zoom) {\n  let willChangeElements = false;\n\n  if (RenderEnvironment.imageBaseURL !== imageBaseURL) {\n    RenderEnvironment.imageBaseURL = imageBaseURL;\n    willChangeElements = true;\n  }\n\n  if (RenderEnvironment.target !== target) {\n    RenderEnvironment.target = target;\n    willChangeElements = true;\n  }\n\n  if (RenderEnvironment.zoom !== zoom) {\n    RenderEnvironment.zoom = zoom;\n  }\n\n  return {\n    willChangeElements\n  };\n}\n/**\n * @internalRemarks\n * This is a read-only equivalent of RenderEnvironment.target that is exposed\n * to components for context-dependent rendering\n * @public\n */\n\n(function (RenderTarget) {\n  /**\n   * Returns the current `RenderTarget` allowing components to apply\n   * different behaviors depending on the environment.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   if (RenderTarget.current() === RenderTarget.thumbnail) {\n   *     return <PreviewIcon />\n   *   }\n   *   return <Frame>...</Frame>\n   * }\n   * ```\n   */\n  function current() {\n    return RenderEnvironment.target;\n  }\n\n  RenderTarget.current = current;\n  /**\n   * Returns true if the current `RenderTarget` has performance restrictions.\n   * Use this to avoid doing heavy work in these contexts because they may\n   * bail on the rendering if the component takes too long.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   if (RenderTarget.hasRestrictions()) {\n   *     return <SomePlaceholder />\n   *   }\n   *   return <RichPreviewContent />\n   * }\n   * ```\n   */\n\n  function hasRestrictions() {\n    const target = RenderEnvironment.target;\n    if (target === RenderTarget.canvas) return true;\n    if (target === RenderTarget.export) return true;\n    return false;\n  }\n\n  RenderTarget.hasRestrictions = hasRestrictions;\n})(RenderTarget || (RenderTarget = {}));","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,WAAYA,YAAZ;;AAAA,WAAYA,YAAZ,EAAwB;AACpB;;;;;;;;;;;;;AAaAA;AACA;;;;;;;;;;;;;;AAaAA;AACA;;;;;;;;;;;;;;;AAcAA;AACA;;;;;;;;;;;;;;;;AAeAA;AACH,CA5DD,EAAYA,YAAY,KAAZA,YAAY,MAAxB;AAuEA;;;;;AAGA,OAAO,MAAMC,iBAAiB,GAAsB;AAChDC,cAAY,EAAE,EADkC;AAEhDC,QAAM,EAAEH,YAAY,CAACI,OAF2B;AAGhDC,MAAI,EAAE;AAH0C,CAA7C;AAMP;;;;;AAIA,OAAM,SAAUC,0BAAV,CAAwCC,iBAAxC,EAAuFC,IAAvF,EAAoG;AACtG;AACA,QAAMC,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,iBAAlB,CAA5B,CAFsG,CAGtG;;AACAS,QAAM,CAACC,MAAP,CAAcV,iBAAd,EAAiCM,iBAAjC;AACA,QAAMK,MAAM,GAAGJ,IAAI,EAAnB,CALsG,CAMtG;;AACAE,QAAM,CAACC,MAAP,CAAcV,iBAAd,EAAiCQ,mBAAjC;AACA,SAAOG,MAAP;AACH;AAED;;;;;;AAKA,OAAM,SAAUC,0BAAV,CAAqCC,WAArC,EAA4E;AAC9EJ,QAAM,CAACC,MAAP,CAAcV,iBAAd,EAAiCa,WAAjC;AACH;AAED;;;;AAGA,OAAM,SAAUC,oBAAV,CAA+BZ,MAA/B,EAAqDD,YAArD,EAA2EG,IAA3E,EAAuF;AACzF,MAAIW,kBAAkB,GAAG,KAAzB;;AAEA,MAAIf,iBAAiB,CAACC,YAAlB,KAAmCA,YAAvC,EAAqD;AACjDD,qBAAiB,CAACC,YAAlB,GAAiCA,YAAjC;AACAc,sBAAkB,GAAG,IAArB;AACH;;AAED,MAAIf,iBAAiB,CAACE,MAAlB,KAA6BA,MAAjC,EAAyC;AACrCF,qBAAiB,CAACE,MAAlB,GAA2BA,MAA3B;AACAa,sBAAkB,GAAG,IAArB;AACH;;AAED,MAAIf,iBAAiB,CAACI,IAAlB,KAA2BA,IAA/B,EAAqC;AACjCJ,qBAAiB,CAACI,IAAlB,GAAyBA,IAAzB;AACH;;AAED,SAAO;AAAEW;AAAF,GAAP;AACH;AAED;;;;;;;AAMA,WAAiBhB,YAAjB,EAA6B;AACzB;;;;;;;;;;;;;;AAcA,WAAgBiB,OAAhB,GAAuB;AACnB,WAAOhB,iBAAiB,CAACE,MAAzB;AACH;;AAFeH,yBAAOiB,OAAP;AAIhB;;;;;;;;;;;;;;;;AAeA,WAAgBC,eAAhB,GAA+B;AAC3B,UAAMf,MAAM,GAAGF,iBAAiB,CAACE,MAAjC;AACA,QAAIA,MAAM,KAAKH,YAAY,CAACmB,MAA5B,EAAoC,OAAO,IAAP;AACpC,QAAIhB,MAAM,KAAKH,YAAY,CAACoB,MAA5B,EAAoC,OAAO,IAAP;AACpC,WAAO,KAAP;AACH;;AALepB,iCAAekB,eAAf;AAMnB,CAxCD,EAAiBlB,YAAY,KAAZA,YAAY,MAA7B","names":["RenderTarget","RenderEnvironment","imageBaseURL","target","preview","zoom","executeInRenderEnvironment","customEnvironment","task","previousEnvironment","Object","assign","result","setGlobalRenderEnvironment","environment","useRenderEnvironment","willChangeElements","current","hasRestrictions","canvas","export"],"sources":["../../../src/render/types/RenderEnvironment.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}