{"ast":null,"code":"import { Point } from \"./Point.js\";\nimport { roundedNumber } from \"../utils/roundedNumber.js\";\n/**\n * @public\n */\n\nexport var Rect;\n\n(function (Rect) {\n  /**\n   *\n   * @param rect -\n   * @param other -\n   * @public\n   */\n  function equals(rect, other) {\n    if (rect === other) return true;\n    if (!rect || !other) return false;\n    return rect.x === other.x && rect.y === other.y && rect.width === other.width && rect.height === other.height;\n  }\n\n  Rect.equals = equals;\n  /** @alpha */\n\n  Rect.atOrigin = size => {\n    return { ...size,\n      x: 0,\n      y: 0\n    };\n  };\n  /** @alpha */\n\n\n  Rect.fromTwoPoints = (a, b) => {\n    return {\n      x: Math.min(a.x, b.x),\n      y: Math.min(a.y, b.y),\n      width: Math.abs(a.x - b.x),\n      height: Math.abs(a.y - b.y)\n    };\n  };\n  /** @alpha */\n\n\n  Rect.fromRect = rect => {\n    return {\n      x: rect.left,\n      y: rect.top,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  };\n  /** @alpha */\n\n\n  Rect.multiply = (rect, n) => {\n    return {\n      x: rect.x * n,\n      y: rect.y * n,\n      width: rect.width * n,\n      height: rect.height * n\n    };\n  };\n  /** @alpha */\n\n\n  Rect.divide = (rect, n) => {\n    return Rect.multiply(rect, 1 / n);\n  };\n  /** @alpha */\n\n\n  Rect.offset = (rect, delta) => {\n    const xOffset = typeof delta.x === \"number\" ? delta.x : 0;\n    const yOffset = typeof delta.y === \"number\" ? delta.y : 0;\n    return { ...rect,\n      x: rect.x + xOffset,\n      y: rect.y + yOffset\n    };\n  };\n  /** @alpha */\n\n\n  function inflate(rect, value) {\n    if (value === 0) return rect;\n    const doubleValue = 2 * value;\n    return {\n      x: rect.x - value,\n      y: rect.y - value,\n      width: rect.width + doubleValue,\n      height: rect.height + doubleValue\n    };\n  }\n\n  Rect.inflate = inflate;\n  /** @alpha */\n\n  Rect.pixelAligned = rect => {\n    const x = Math.round(rect.x);\n    const y = Math.round(rect.y);\n    const rectMaxX = Math.round(rect.x + rect.width);\n    const rectMaxY = Math.round(rect.y + rect.height);\n    const width = Math.max(rectMaxX - x, 0);\n    const height = Math.max(rectMaxY - y, 0);\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /** @alpha */\n\n\n  Rect.halfPixelAligned = rect => {\n    const x = Math.round(rect.x * 2) / 2;\n    const y = Math.round(rect.y * 2) / 2;\n    const rectMaxX = Math.round((rect.x + rect.width) * 2) / 2;\n    const rectMaxY = Math.round((rect.y + rect.height) * 2) / 2;\n    const width = Math.max(rectMaxX - x, 1);\n    const height = Math.max(rectMaxY - y, 1);\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /** @alpha */\n\n\n  Rect.round = function (rect) {\n    let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const x = roundedNumber(rect.x, decimals);\n    const y = roundedNumber(rect.y, decimals);\n    const width = roundedNumber(rect.width, decimals);\n    const height = roundedNumber(rect.height, decimals);\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /** @alpha */\n\n\n  Rect.roundToOutside = rect => {\n    const x = Math.floor(rect.x);\n    const y = Math.floor(rect.y);\n    const rectMaxX = Math.ceil(rect.x + rect.width);\n    const rectMaxY = Math.ceil(rect.y + rect.height);\n    const width = Math.max(rectMaxX - x, 0);\n    const height = Math.max(rectMaxY - y, 0);\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /**\n   * @param rect -\n   * @beta\n   */\n\n\n  Rect.minX = rect => {\n    return rect.x;\n  };\n  /**\n   * @param rect -\n   * @beta\n   */\n\n\n  Rect.maxX = rect => {\n    return rect.x + rect.width;\n  };\n  /**\n   * @param rect -\n   * @beta\n   */\n\n\n  Rect.minY = rect => {\n    return rect.y;\n  };\n  /**\n   * @param rect -\n   * @beta\n   */\n\n\n  Rect.maxY = rect => {\n    return rect.y + rect.height;\n  };\n  /** @internal */\n\n\n  Rect.positions = rect => {\n    return {\n      minX: rect.x,\n      midX: rect.x + rect.width / 2,\n      maxX: Rect.maxX(rect),\n      minY: rect.y,\n      midY: rect.y + rect.height / 2,\n      maxY: Rect.maxY(rect)\n    };\n  };\n  /**\n   *\n   * @param rect -\n   * @beta\n   */\n\n\n  Rect.center = rect => {\n    return {\n      x: rect.x + rect.width / 2,\n      y: rect.y + rect.height / 2\n    };\n  };\n  /** @internal */\n\n\n  Rect.fromPoints = ps => {\n    const xValues = ps.map(point => point.x);\n    const yValues = ps.map(point => point.y);\n    const x = Math.min(...xValues);\n    const y = Math.min(...yValues);\n    const width = Math.max(...xValues) - x;\n    const height = Math.max(...yValues) - y;\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /**\n   * Returns a rect containing all input rects\n   * @param rect - a list of rectangles\n   * @returns A rectangle that fits exactly around the input rects\n   * @internal\n   */\n\n\n  Rect.merge = function () {\n    for (var _len = arguments.length, rect = new Array(_len), _key = 0; _key < _len; _key++) {\n      rect[_key] = arguments[_key];\n    }\n\n    const min = {\n      x: Math.min(...rect.map(Rect.minX)),\n      y: Math.min(...rect.map(Rect.minY))\n    };\n    const max = {\n      x: Math.max(...rect.map(Rect.maxX)),\n      y: Math.max(...rect.map(Rect.maxY))\n    };\n    return Rect.fromTwoPoints(min, max);\n  };\n  /** @alpha */\n\n\n  Rect.intersection = (rect1, rect2) => {\n    const x = Math.max(rect1.x, rect2.x);\n    const x2 = Math.min(rect1.x + rect1.width, rect2.x + rect2.width);\n    const y = Math.max(rect1.y, rect2.y);\n    const y2 = Math.min(rect1.y + rect1.height, rect2.y + rect2.height);\n    return {\n      x,\n      y,\n      width: x2 - x,\n      height: y2 - y\n    };\n  };\n  /**\n   * Returns all the corner points for a rect\n   * @param rect -\n   * @internal\n   */\n\n\n  Rect.points = rect => {\n    return [{\n      x: Rect.minX(rect),\n      y: Rect.minY(rect)\n    }, {\n      x: Rect.minX(rect),\n      y: Rect.maxY(rect)\n    }, {\n      x: Rect.maxX(rect),\n      y: Rect.minY(rect)\n    }, {\n      x: Rect.maxX(rect),\n      y: Rect.maxY(rect)\n    }];\n  };\n  /** Takes a rect and transforms it by a matrix, resulting in the bounding rectangle of the\n   * rotated and/or translated original.\n   * @param rect - rectangle to transform\n   * @param matrix - matrix to transform by\n   * @returns The bounding rectangle of the rotated and/or translated rect.\n   */\n\n\n  Rect.transform = (rect, matrix) => {\n    const {\n      x: x1,\n      y: y1\n    } = matrix.transformPoint({\n      x: rect.x,\n      y: rect.y\n    });\n    const {\n      x: x2,\n      y: y2\n    } = matrix.transformPoint({\n      x: rect.x + rect.width,\n      y: rect.y\n    });\n    const {\n      x: x3,\n      y: y3\n    } = matrix.transformPoint({\n      x: rect.x + rect.width,\n      y: rect.y + rect.height\n    });\n    const {\n      x: x4,\n      y: y4\n    } = matrix.transformPoint({\n      x: rect.x,\n      y: rect.y + rect.height\n    });\n    const x = Math.min(x1, x2, x3, x4);\n    const width = Math.max(x1, x2, x3, x4) - x;\n    const y = Math.min(y1, y2, y3, y4);\n    const height = Math.max(y1, y2, y3, y4) - y;\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /**\n   * Checks if a rectangle contains a point\n   * @param rect - The rectangle to check\n   * @param point - The point to check\n   * @returns true if the provided rectangle contains the provided point\n   * @beta\n   */\n\n\n  Rect.containsPoint = (rect, point) => {\n    if (point.x < Rect.minX(rect)) {\n      return false;\n    }\n\n    if (point.x > Rect.maxX(rect)) {\n      return false;\n    }\n\n    if (point.y < Rect.minY(rect)) {\n      return false;\n    }\n\n    if (point.y > Rect.maxY(rect)) {\n      return false;\n    }\n\n    if (isNaN(rect.x)) {\n      return false;\n    }\n\n    if (isNaN(rect.y)) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Returns wether a rect contains another rect entirely\n   * @param rectA -\n   * @param rectB -\n   * @returns true if rectA contains rectB\n   */\n\n\n  Rect.containsRect = (rectA, rectB) => {\n    for (const point of Rect.points(rectB)) {\n      if (!Rect.containsPoint(rectA, point)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /** @alpha */\n\n\n  Rect.toCSS = rect => {\n    return {\n      display: \"block\",\n      transform: `translate(${rect.x}px, ${rect.y}px)`,\n      width: `${rect.width}px`,\n      height: `${rect.height}px`\n    };\n  };\n  /** @alpha */\n\n\n  Rect.inset = (rect, n) => {\n    return {\n      x: rect.x + n,\n      y: rect.y + n,\n      width: Math.max(0, rect.width - 2 * n),\n      height: Math.max(0, rect.height - 2 * n)\n    };\n  };\n  /** @alpha */\n\n\n  Rect.intersects = (rectA, rectB) => {\n    return !(rectB.x >= Rect.maxX(rectA) || Rect.maxX(rectB) <= rectA.x || rectB.y >= Rect.maxY(rectA) || Rect.maxY(rectB) <= rectA.y);\n  };\n  /** @internal */\n\n\n  Rect.overlapHorizontally = (rectA, rectB) => {\n    const aMax = Rect.maxX(rectA);\n    const bMax = Rect.maxX(rectB);\n    return aMax > rectB.x && bMax > rectA.x;\n  };\n  /** @internal */\n\n\n  Rect.overlapVertically = (rectA, rectB) => {\n    const aMax = Rect.maxY(rectA);\n    const bMax = Rect.maxY(rectB);\n    return aMax > rectB.y && bMax > rectA.y;\n  };\n  /** @internal */\n\n\n  Rect.doesNotIntersect = (rect, rects) => {\n    return rects.find(comparingRect => {\n      return Rect.intersects(comparingRect, rect);\n    }) === undefined;\n  };\n  /**\n   *\n   * @param rectA -\n   * @param rectB -\n   * @returns if the input rectangles are equal in size and position\n   * @public\n   */\n\n\n  Rect.isEqual = (rectA, rectB) => {\n    if (rectA && rectB) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = rectA;\n      return rectB.x === x && rectB.y === y && rectB.width === width && rectB.height === height;\n    } else {\n      return rectA === rectB;\n    }\n  };\n  /** @internal */\n\n\n  Rect.cornerPoints = rect => {\n    const rectMinX = rect.x;\n    const rectMaxX = rect.x + rect.width;\n    const rectMinY = rect.y;\n    const rectMaxY = rect.y + rect.height;\n    const corner1 = {\n      x: rectMinX,\n      y: rectMinY\n    };\n    const corner2 = {\n      x: rectMaxX,\n      y: rectMinY\n    };\n    const corner3 = {\n      x: rectMaxX,\n      y: rectMaxY\n    };\n    const corner4 = {\n      x: rectMinX,\n      y: rectMaxY\n    };\n    return [corner1, corner2, corner3, corner4];\n  };\n  /** @internal */\n\n\n  Rect.midPoints = rect => {\n    const rectMinX = rect.x;\n    const rectMidX = rect.x + rect.width / 2;\n    const rectMaxX = rect.x + rect.width;\n    const rectMinY = rect.y;\n    const rectMidY = rect.y + rect.height / 2;\n    const rectMaxY = rect.y + rect.height;\n    const corner1 = {\n      x: rectMidX,\n      y: rectMinY\n    };\n    const corner2 = {\n      x: rectMaxX,\n      y: rectMidY\n    };\n    const corner3 = {\n      x: rectMidX,\n      y: rectMaxY\n    };\n    const corner4 = {\n      x: rectMinX,\n      y: rectMidY\n    };\n    return [corner1, corner2, corner3, corner4];\n  };\n  /** @internal */\n\n\n  Rect.pointDistance = (rect, point) => {\n    let x = 0;\n    let y = 0;\n\n    if (point.x < rect.x) {\n      x = rect.x - point.x;\n    } else if (point.x > Rect.maxX(rect)) {\n      x = point.x - Rect.maxX(rect);\n    }\n\n    if (point.y < rect.y) {\n      y = rect.y - point.y;\n    } else if (point.y > Rect.maxY(rect)) {\n      y = point.y - Rect.maxY(rect);\n    }\n\n    return Point.distance({\n      x,\n      y\n    }, {\n      x: 0,\n      y: 0\n    });\n  };\n\n  const fromAnyDefaults = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  };\n  /** @internal */\n\n  Rect.fromAny = function (rect) {\n    let defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : fromAnyDefaults;\n    return {\n      x: rect.x || defaults.x,\n      y: rect.y || defaults.y,\n      width: rect.width || defaults.width,\n      height: rect.height || defaults.height\n    };\n  };\n})(Rect || (Rect = {}));","map":{"version":3,"mappings":"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","names":["Point","roundedNumber","Rect","equals","rect","other","x","y","width","height","size","a","b","Math","min","abs","left","top","right","bottom","n","delta","xOffset","yOffset","inflate","value","doubleValue","round","rectMaxX","rectMaxY","max","decimals","floor","ceil","minX","midX","maxX","minY","midY","maxY","ps","xValues","map","point","yValues","rect1","rect2","x2","y2","matrix","x1","y1","transformPoint","x3","y3","x4","y4","isNaN","rectA","rectB","display","transform","aMax","bMax","rects","find","comparingRect","intersects","undefined","rectMinX","rectMinY","corner1","corner2","corner3","corner4","rectMidX","rectMidY","distance","fromAnyDefaults","defaults"],"sources":["../../../src/render/types/Rect.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}