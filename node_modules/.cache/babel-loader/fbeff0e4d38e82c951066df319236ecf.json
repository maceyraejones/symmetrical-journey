{"ast":null,"code":"import { warnOnce } from \"../utils/warnOnce.js\";\n\nconst mockWithWarning = message => {\n  return () => {\n    warnOnce(message);\n  };\n};\n/** This stores the injected implementations */\n\n\nconst implementation = {\n  // We need a default implementation for useImageSource and useImageElement as it is used for rendering image backgrounds which would break otherwise.\n  // The default value is used for HTML export and when using the library without Framer.\n  useImageSource(image) {\n    return image.src;\n  },\n\n  useImageElement(image, rect, nodeId) {\n    const element = new Image();\n    element.src = runtime.useImageSource(image, rect, nodeId); // srcSet doesn't need resolving via useImageSource, since these are\n    // currently only used in generated components, where resolution happens\n    // during code-generation.\n\n    if (image.srcSet) element.srcset = image.srcSet;\n    return element;\n  }\n\n};\nlet isRuntimeInjected = false;\nconst runtimeProxy = {\n  get(target, key, reciever) {\n    if (Reflect.has(target, key)) {\n      return Reflect.get(target, key, reciever);\n    }\n\n    if (isRuntimeInjected) {\n      return mockWithWarning(`${String(key)} is not available in this version of Framer.`);\n    } else {\n      return mockWithWarning(`${String(key)} is only available inside of Framer. https://www.framer.com/`);\n    }\n  }\n\n};\n/**\n * This proxy makes sure that any key on the runtime object will return a\n * function that logs a warning to the console. Functions for which a\n * implementation is provided are available through this object, e.g.\n * `runtime.addActionControls()`\n * @internal\n */\n\nexport const runtime = new Proxy(implementation, runtimeProxy);\n/**\n * This function is used by the `initializeRuntime()` function of the runtime to\n * provide the implementation of the functions defined in the `Runtime`\n * interface.\n * @internal\n */\n\nexport function _injectRuntime(injectedRuntime) {\n  Object.assign(implementation, injectedRuntime);\n  isRuntimeInjected = true;\n}","map":{"version":3,"mappings":"AAIA,SAASA,QAAT,QAAyB,sBAAzB;;AAkEA,MAAMC,eAAe,GAAIC,OAAD,IAAoB;AACxC,SAAO,MAAK;AACRF,YAAQ,CAACE,OAAD,CAAR;AACH,GAFD;AAGH,CAJD;AAMA;;;AACA,MAAMC,cAAc,GAAqB;AACrC;AACA;AACAC,gBAAc,CAACC,KAAD,EAAM;AAChB,WAAOA,KAAK,CAACC,GAAb;AACH,GALoC;;AAMrCC,iBAAe,CAACF,KAAD,EAAQG,IAAR,EAAcC,MAAd,EAAoB;AAC/B,UAAMC,OAAO,GAAG,IAAIC,KAAJ,EAAhB;AACAD,WAAO,CAACJ,GAAR,GAAcM,OAAO,CAACR,cAAR,CAAuBC,KAAvB,EAA8BG,IAA9B,EAAoCC,MAApC,CAAd,CAF+B,CAG/B;AACA;AACA;;AACA,QAAIJ,KAAK,CAACQ,MAAV,EAAkBH,OAAO,CAACI,MAAR,GAAiBT,KAAK,CAACQ,MAAvB;AAClB,WAAOH,OAAP;AACH;;AAdoC,CAAzC;AAiBA,IAAIK,iBAAiB,GAAG,KAAxB;AACA,MAAMC,YAAY,GAA0B;AACxCC,KAAG,CAACC,MAAD,EAASC,GAAT,EAAcC,QAAd,EAAsB;AACrB,QAAIC,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoBC,GAApB,CAAJ,EAA8B;AAC1B,aAAOE,OAAO,CAACJ,GAAR,CAAYC,MAAZ,EAAoBC,GAApB,EAAyBC,QAAzB,CAAP;AACH;;AAED,QAAIL,iBAAJ,EAAuB;AACnB,aAAOd,eAAe,CAAC,GAAGsB,MAAM,CAACJ,GAAD,CAAK,8CAAf,CAAtB;AACH,KAFD,MAEO;AACH,aAAOlB,eAAe,CAAC,GAAGsB,MAAM,CAACJ,GAAD,CAAK,8DAAf,CAAtB;AACH;AACJ;;AAXuC,CAA5C;AAcA;;;;;;;;AAOA,OAAO,MAAMP,OAAO,GAAY,IAAIY,KAAJ,CAAUrB,cAAV,EAAqCa,YAArC,CAAzB;AAEP;;;;;;;AAMA,OAAM,SAAUS,cAAV,CAAyBC,eAAzB,EAA0D;AAC5DC,QAAM,CAACC,MAAP,CAAczB,cAAd,EAA8BuB,eAA9B;AACAX,mBAAiB,GAAG,IAApB;AACH","names":["warnOnce","mockWithWarning","message","implementation","useImageSource","image","src","useImageElement","rect","nodeId","element","Image","runtime","srcSet","srcset","isRuntimeInjected","runtimeProxy","get","target","key","reciever","Reflect","has","String","Proxy","_injectRuntime","injectedRuntime","Object","assign"],"sources":["../../src/utils/runtimeInjection.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}