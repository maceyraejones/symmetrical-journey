{"ast":null,"code":"import * as React from \"react\";\nimport { cx } from \"../../modules/cx.js\";\nimport { FrameWithMotion } from \"../../render/presentation/Frame/FrameWithMotion.js\";\nimport { isFiniteNumber } from \"../../render/utils/isFiniteNumber.js\";\nimport { useLayoutId } from \"../../render/utils/useLayoutId.js\";\nimport { useEmulateTouchScroll } from \"../utils/useEmulatedTouchScroll.js\";\nimport { isMotionValue } from \"../../render/utils/isMotionValue.js\";\nimport { injectComponentCSSRules } from \"../../render/utils/injectComponentCSSRules.js\";\nimport { useIsInCurrentNavigationTarget } from \"../NavigationContainerContext.js\";\nimport { useUpdateScrollOffset } from \"../utils/useUpdateScrollOffset.js\";\nimport { useIsomorphicLayoutEffect } from \"../../useIsomorphicLayoutEffect.js\";\nimport { EmptyState } from \"../EmptyState.js\";\n/**\n * @private\n */\n\nexport const NativeScroll = React.forwardRef(function NativeScroll(props, forwardedRef) {\n  const {\n    direction = \"vertical\",\n    scrollBarVisible = false,\n    dragEnabled = true,\n    contentOffsetX = 0,\n    contentOffsetY = 0,\n    contentWidth,\n    contentHeight,\n    children,\n    resetOffset,\n    onScroll,\n    className,\n    // Not (yet) supported\n    directionLock = false,\n    wheelEnabled = true,\n    scrollAnimate,\n    dragTransition,\n    dragMomentum,\n    dragElastic,\n    overdragEnabled = true,\n    onScrollStart,\n    onScrollEnd,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onUpdate,\n    onDirectionLock,\n    layoutId: specificLayoutId,\n    native,\n    // Rest\n    ...containerProps\n  } = props;\n  const layoutId = useLayoutId(props, {\n    specificLayoutId,\n    postfix: \"scroll\"\n  });\n  const fallbackRef = React.useRef(null);\n  const ref = forwardedRef || fallbackRef;\n  const {\n    cancelEmulatedTouchScrollAnimation\n  } = useEmulateTouchScroll(ref, direction, dragEnabled);\n  injectComponentCSSRules();\n  const isInTarget = useIsInCurrentNavigationTarget();\n  const previousIsInTargetRef = React.useRef(isInTarget);\n\n  const updateScrollOffsetHandler = () => {\n    if (!resetOffset) return;\n    const previousIsTarget = previousIsInTargetRef.current;\n    previousIsInTargetRef.current = isInTarget;\n    const shouldResetOffset = isInTarget && !previousIsTarget;\n    if (!shouldResetOffset) return;\n    const element = ref.current;\n    if (!element) return;\n\n    if (direction !== \"vertical\") {\n      cancelEmulatedTouchScrollAnimation?.();\n      element.scrollLeft = Math.abs(isMotionValue(contentOffsetX) ? contentOffsetX.get() : contentOffsetX);\n    }\n\n    if (direction !== \"horizontal\") {\n      cancelEmulatedTouchScrollAnimation?.();\n      element.scrollTop = Math.abs(isMotionValue(contentOffsetY) ? contentOffsetY.get() : contentOffsetY);\n    }\n  }; // We only want to update the scroll offset when isInTarget changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  useIsomorphicLayoutEffect(updateScrollOffsetHandler, [isInTarget]);\n  useUpdateScrollOffset(ref, \"scrollLeft\", contentOffsetX, cancelEmulatedTouchScrollAnimation);\n  useUpdateScrollOffset(ref, \"scrollTop\", contentOffsetY, cancelEmulatedTouchScrollAnimation);\n  const size = !containerProps.__fromCanvasComponent ? {\n    width: containerProps.__fromCodeComponentNode ? \"100%\" : containerProps.width,\n    height: containerProps.__fromCodeComponentNode ? \"100%\" : containerProps.height\n  } : {};\n  return React.createElement(FrameWithMotion, {\n    ref: ref,\n    \"data-framer-component-type\": \"NativeScroll\",\n    background: \"none\" // need to set here to prevent default background from Frame\n    ,\n    ...containerProps,\n    ...size,\n    onScroll: onScroll,\n    layoutId: layoutId,\n    onBeforeLayoutMeasure: updateScrollOffsetHandler,\n    layoutScroll: true,\n    className: cx(className, `direction-${direction}`, !scrollBarVisible && \"scrollbar-hidden\")\n  }, React.createElement(EmptyState, {\n    children: children,\n    size: {\n      width: isFiniteNumber(containerProps.width) ? containerProps.width : \"100%\",\n      height: isFiniteNumber(containerProps.height) ? containerProps.height : \"100%\"\n    },\n    insideUserCodeComponent: !containerProps.__fromCodeComponentNode,\n    title: \"Scroll\",\n    description: \"Click and drag the connector to any frame on the canvas \\u2192\"\n  }), children);\n});","map":{"version":3,"mappings":"AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,EAAT,QAAmB,qBAAnB;AACA,SAASC,eAAT,QAAgC,oDAAhC;AACA,SAASC,cAAT,QAA+B,sCAA/B;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,SAASC,qBAAT,QAAsC,oCAAtC;AACA,SAASC,aAAT,QAA8B,qCAA9B;AACA,SAASC,uBAAT,QAAwC,+CAAxC;AACA,SAASC,8BAAT,QAA+C,kCAA/C;AACA,SAASC,qBAAT,QAAsC,mCAAtC;AACA,SAASC,yBAAT,QAA0C,oCAA1C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA;;;;AAGA,OAAO,MAAMC,YAAY,GAAGZ,KAAK,CAACa,UAAN,CAAoD,SAASD,YAAT,CAC5EE,KAD4E,EAE5EC,YAF4E,EAExB;AAEpD,QAAM;AACFC,aAAS,GAAG,UADV;AAEFC,oBAAgB,GAAG,KAFjB;AAGFC,eAAW,GAAG,IAHZ;AAIFC,kBAAc,GAAG,CAJf;AAKFC,kBAAc,GAAG,CALf;AAMFC,gBANE;AAOFC,iBAPE;AAQFC,YARE;AASFC,eATE;AAUFC,YAVE;AAWFC,aAXE;AAYF;AACAC,iBAAa,GAAG,KAbd;AAcFC,gBAAY,GAAG,IAdb;AAeFC,iBAfE;AAgBFC,kBAhBE;AAiBFC,gBAjBE;AAkBFC,eAlBE;AAmBFC,mBAAe,GAAG,IAnBhB;AAoBFC,iBApBE;AAqBFC,eArBE;AAsBFC,eAtBE;AAuBFC,UAvBE;AAwBFC,aAxBE;AAyBFC,YAzBE;AA0BFC,mBA1BE;AA2BFC,YAAQ,EAAEC,gBA3BR;AA4BFC,UA5BE;AA6BF;AACA,OAAGC;AA9BD,MA+BF9B,KA/BJ;AAiCA,QAAM2B,QAAQ,GAAGrC,WAAW,CAACU,KAAD,EAAQ;AAAE4B,oBAAF;AAAoBG,WAAO,EAAE;AAA7B,GAAR,CAA5B;AAEA,QAAMC,WAAW,GAAG9C,KAAK,CAAC+C,MAAN,CAA6B,IAA7B,CAApB;AACA,QAAMC,GAAG,GAAGjC,YAAY,IAAI+B,WAA5B;AAEA,QAAM;AAAEG;AAAF,MAAyC5C,qBAAqB,CAAC2C,GAAD,EAAMhC,SAAN,EAAiBE,WAAjB,CAApE;AAEAX,yBAAuB;AAEvB,QAAM2C,UAAU,GAAG1C,8BAA8B,EAAjD;AACA,QAAM2C,qBAAqB,GAAGnD,KAAK,CAAC+C,MAAN,CAAaG,UAAb,CAA9B;;AAEA,QAAME,yBAAyB,GAAG,MAAK;AACnC,QAAI,CAAC5B,WAAL,EAAkB;AAClB,UAAM6B,gBAAgB,GAAGF,qBAAqB,CAACG,OAA/C;AACAH,yBAAqB,CAACG,OAAtB,GAAgCJ,UAAhC;AACA,UAAMK,iBAAiB,GAAGL,UAAU,IAAI,CAACG,gBAAzC;AACA,QAAI,CAACE,iBAAL,EAAwB;AACxB,UAAMC,OAAO,GAAGR,GAAG,CAACM,OAApB;AACA,QAAI,CAACE,OAAL,EAAc;;AACd,QAAIxC,SAAS,KAAK,UAAlB,EAA8B;AAC1BiC,wCAAkC;AAClCO,aAAO,CAACC,UAAR,GAAqBC,IAAI,CAACC,GAAL,CAASrD,aAAa,CAACa,cAAD,CAAb,GAAgCA,cAAc,CAACyC,GAAf,EAAhC,GAAuDzC,cAAhE,CAArB;AACH;;AACD,QAAIH,SAAS,KAAK,YAAlB,EAAgC;AAC5BiC,wCAAkC;AAClCO,aAAO,CAACK,SAAR,GAAoBH,IAAI,CAACC,GAAL,CAASrD,aAAa,CAACc,cAAD,CAAb,GAAgCA,cAAc,CAACwC,GAAf,EAAhC,GAAuDxC,cAAhE,CAApB;AACH;AACJ,GAhBD,CA/CoD,CAiEpD;AACA;;;AACAV,2BAAyB,CAAC0C,yBAAD,EAA4B,CAACF,UAAD,CAA5B,CAAzB;AAEAzC,uBAAqB,CAACuC,GAAD,EAAM,YAAN,EAAoB7B,cAApB,EAAoC8B,kCAApC,CAArB;AACAxC,uBAAqB,CAACuC,GAAD,EAAM,WAAN,EAAmB5B,cAAnB,EAAmC6B,kCAAnC,CAArB;AAEA,QAAMa,IAAI,GAAG,CAAClB,cAAc,CAACmB,qBAAhB,GACP;AACIC,SAAK,EAAEpB,cAAc,CAACqB,uBAAf,GAAyC,MAAzC,GAAkDrB,cAAc,CAACoB,KAD5E;AAEIE,UAAM,EAAEtB,cAAc,CAACqB,uBAAf,GAAyC,MAAzC,GAAkDrB,cAAc,CAACsB;AAF7E,GADO,GAKP,EALN;AAOA,SACIlE,oBAACE,eAAD,EAAgB;AACZ8C,OAAG,EAAEA,GADO;AACJ,kCACmB,cAFf;AAGZmB,cAAU,EAAC,MAHC,CAGM;AAHN;OAIRvB,cAJQ;AAIM,OACdkB,IALQ;AAMZrC,YAAQ,EAAEA,QANE;AAOZgB,YAAQ,EAAEA,QAPE;AAQZ2B,yBAAqB,EAAEhB,yBARX;AASZiB,gBAAY,MATA;AAUZ3C,aAAS,EAAEzB,EAAE,CAACyB,SAAD,EAAY,aAAaV,SAAS,EAAlC,EAAsC,CAACC,gBAAD,IAAqB,kBAA3D;AAVD,GAAhB,EAYIjB,oBAACW,UAAD,EAAW;AACPY,YAAQ,EAAEA,QADH;AAEPuC,QAAI,EAAE;AACFE,WAAK,EAAE7D,cAAc,CAACyC,cAAc,CAACoB,KAAhB,CAAd,GAAuCpB,cAAc,CAACoB,KAAtD,GAA8D,MADnE;AAEFE,YAAM,EAAE/D,cAAc,CAACyC,cAAc,CAACsB,MAAhB,CAAd,GAAwCtB,cAAc,CAACsB,MAAvD,GAAgE;AAFtE,KAFC;AAMPI,2BAAuB,EAAE,CAAC1B,cAAc,CAACqB,uBANlC;AAOPM,SAAK,EAAC,QAPC;AAQPC,eAAW,EAAC;AARL,GAAX,CAZJ,EAsBKjD,QAtBL,CADJ;AA0BH,CA3G2B,CAArB","names":["React","cx","FrameWithMotion","isFiniteNumber","useLayoutId","useEmulateTouchScroll","isMotionValue","injectComponentCSSRules","useIsInCurrentNavigationTarget","useUpdateScrollOffset","useIsomorphicLayoutEffect","EmptyState","NativeScroll","forwardRef","props","forwardedRef","direction","scrollBarVisible","dragEnabled","contentOffsetX","contentOffsetY","contentWidth","contentHeight","children","resetOffset","onScroll","className","directionLock","wheelEnabled","scrollAnimate","dragTransition","dragMomentum","dragElastic","overdragEnabled","onScrollStart","onScrollEnd","onDragStart","onDrag","onDragEnd","onUpdate","onDirectionLock","layoutId","specificLayoutId","native","containerProps","postfix","fallbackRef","useRef","ref","cancelEmulatedTouchScrollAnimation","isInTarget","previousIsInTargetRef","updateScrollOffsetHandler","previousIsTarget","current","shouldResetOffset","element","scrollLeft","Math","abs","get","scrollTop","size","__fromCanvasComponent","width","__fromCodeComponentNode","height","background","onBeforeLayoutMeasure","layoutScroll","insideUserCodeComponent","title","description"],"sources":["../../../src/components/Scroll/NativeScroll.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}