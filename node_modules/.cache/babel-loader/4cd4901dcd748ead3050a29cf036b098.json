{"ast":null,"code":"import * as React from \"react\";\nimport { DimensionType, ConstraintMask, valueToDimensionType, ConstraintValues } from \"./Constraints.js\";\nimport { isFiniteNumber } from \"../utils/isFiniteNumber.js\";\n\nfunction isString(t) {\n  return typeof t === \"string\";\n} // The old constraint system does not allow for strings, so this function checks if the layout props contain string values\n// In certain centering cases we can convert the strings to the old constraint system, so that logic is captured here\n\n\nfunction containsInvalidStringValues(props) {\n  const {\n    left,\n    right,\n    top,\n    bottom,\n    center\n  } = props; // We never allow right or bottom to be strings\n\n  if ([right, bottom].some(isString)) {\n    return true;\n  } // Only allow a string for left, if it is part of the centering logic\n\n\n  if (isString(left) && (!center || center === \"y\")) {\n    // We are not centering or only centering in the opposite direction\n    return true;\n  } // Only allow a string for top, if it is part of the centering logic\n\n\n  if (isString(top) && (!center || center === \"x\")) {\n    // We are not centering or only centering in the opposite direction\n    return true;\n  }\n\n  return false;\n}\n/** @internal */\n\n\nexport function constraintsEnabled(props) {\n  const {\n    _constraints\n  } = props;\n\n  if (!_constraints) {\n    return false;\n  }\n\n  if (containsInvalidStringValues(props)) {\n    return false;\n  }\n\n  return _constraints.enabled;\n}\n\nfunction sizeFromFiniteNumberProps(props) {\n  const {\n    size\n  } = props;\n  let {\n    width,\n    height\n  } = props;\n\n  if (isFiniteNumber(size)) {\n    if (width === undefined) {\n      width = size;\n    }\n\n    if (height === undefined) {\n      height = size;\n    }\n  }\n\n  if (isFiniteNumber(width) && isFiniteNumber(height)) {\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n  return null;\n}\n\nfunction rectFromFiniteNumberProps(props) {\n  const size = sizeFromFiniteNumberProps(props);\n\n  if (size === null) {\n    return null;\n  }\n\n  const {\n    left,\n    top\n  } = props;\n\n  if (isFiniteNumber(left) && isFiniteNumber(top)) {\n    return {\n      x: left,\n      y: top,\n      ...size\n    };\n  }\n\n  return null;\n}\n\nexport function calculateSize(props, parentSize) {\n  if (!constraintsEnabled(props) || parentSize === ParentSizeState.Disabled || parentSize === ParentSizeState.DisabledForCurrentLevel) {\n    return sizeFromFiniteNumberProps(props);\n  }\n\n  const constraintValues = getConstraintValues(props);\n  const pixelAlign = true;\n  const rect = ConstraintValues.toRect(constraintValues, deprecatedParentSize(parentSize), null, pixelAlign);\n  return {\n    width: rect.width,\n    height: rect.height\n  };\n}\n/** @internal */\n\nexport function calculateRect(props, parentSize) {\n  let pixelAlign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (!constraintsEnabled(props) || parentSize === ParentSizeState.Disabled || parentSize === ParentSizeState.DisabledForCurrentLevel) {\n    return rectFromFiniteNumberProps(props);\n  }\n\n  const constraintValues = getConstraintValues(props);\n  return ConstraintValues.toRect(constraintValues, deprecatedParentSize(parentSize), null, pixelAlign);\n}\n/** @internal */\n\nexport function getConstraintValues(props) {\n  const {\n    left,\n    right,\n    top,\n    bottom,\n    center,\n    _constraints,\n    size\n  } = props;\n  let {\n    width,\n    height\n  } = props;\n\n  if (width === undefined) {\n    width = size;\n  }\n\n  if (height === undefined) {\n    height = size;\n  }\n\n  const {\n    aspectRatio,\n    autoSize\n  } = _constraints;\n  const constraintMask = ConstraintMask.quickfix({\n    left: isFiniteNumber(left),\n    right: isFiniteNumber(right),\n    top: isFiniteNumber(top),\n    bottom: isFiniteNumber(bottom),\n    widthType: valueToDimensionType(width),\n    heightType: valueToDimensionType(height),\n    aspectRatio: aspectRatio || null,\n    fixedSize: autoSize === true\n  });\n  let widthValue = null;\n  let heightValue = null;\n  let widthType = DimensionType.FixedNumber;\n  let heightType = DimensionType.FixedNumber;\n\n  if (constraintMask.widthType !== DimensionType.FixedNumber && typeof width === \"string\") {\n    const parsedWidth = parseFloat(width);\n\n    if (width.endsWith(\"fr\")) {\n      widthType = DimensionType.FractionOfFreeSpace;\n      widthValue = parsedWidth;\n    } else if (width === \"auto\") {\n      widthType = DimensionType.Auto;\n    } else {\n      // Percentage\n      widthType = DimensionType.Percentage;\n      widthValue = parsedWidth / 100;\n    }\n  } else if (width !== undefined && typeof width !== \"string\") {\n    widthValue = width;\n  }\n\n  if (constraintMask.heightType !== DimensionType.FixedNumber && typeof height === \"string\") {\n    const parsedHeight = parseFloat(height);\n\n    if (height.endsWith(\"fr\")) {\n      heightType = DimensionType.FractionOfFreeSpace;\n      heightValue = parsedHeight;\n    } else if (height === \"auto\") {\n      heightType = DimensionType.Auto;\n    } else {\n      // Percentage\n      heightType = DimensionType.Percentage;\n      heightValue = parseFloat(height) / 100;\n    }\n  } else if (height !== undefined && typeof height !== \"string\") {\n    heightValue = height;\n  }\n\n  let centerAnchorX = 0.5;\n  let centerAnchorY = 0.5; // XXX: is this\n\n  if (center === true || center === \"x\") {\n    constraintMask.left = false;\n\n    if (typeof left === \"string\") {\n      centerAnchorX = parseFloat(left) / 100;\n    }\n  }\n\n  if (center === true || center === \"y\") {\n    constraintMask.top = false;\n\n    if (typeof top === \"string\") {\n      centerAnchorY = parseFloat(top) / 100;\n    }\n  }\n\n  return {\n    // Because we check isFiniteNumber when creating the masks,\n    // We know that left, right, top and bottom are numbers if the mask is true for the corresponding value\n    // We need to cast this because typescript does not understand that\n    left: constraintMask.left ? left : null,\n    right: constraintMask.right ? right : null,\n    top: constraintMask.top ? top : null,\n    bottom: constraintMask.bottom ? bottom : null,\n    widthType,\n    heightType,\n    width: widthValue,\n    height: heightValue,\n    aspectRatio: constraintMask.aspectRatio || null,\n    centerAnchorX: centerAnchorX,\n    centerAnchorY: centerAnchorY\n  };\n}\n/** @internal */\n\nexport var ParentSizeState;\n\n(function (ParentSizeState) {\n  ParentSizeState[ParentSizeState[\"Unknown\"] = 0] = \"Unknown\";\n  ParentSizeState[ParentSizeState[\"Disabled\"] = 1] = \"Disabled\";\n  ParentSizeState[ParentSizeState[\"DisabledForCurrentLevel\"] = 2] = \"DisabledForCurrentLevel\";\n})(ParentSizeState || (ParentSizeState = {})); // Only exported for use in class components, otherwise use one of the hooks below\n\n\nexport const ConstraintsContext = React.createContext({\n  size: ParentSizeState.Unknown\n});\nexport function deprecatedParentSize(parentSize) {\n  if (parentSize === ParentSizeState.Unknown || parentSize === ParentSizeState.Disabled || parentSize === ParentSizeState.DisabledForCurrentLevel) {\n    return null;\n  }\n\n  return parentSize;\n}\n/** @internal */\n\nexport function useParentSize() {\n  return React.useContext(ConstraintsContext).size;\n}\nexport function isSize(o) {\n  return typeof o === \"object\";\n}\n/** @internal */\n\nexport const ProvideParentSize = props => {\n  const currentParentSize = useParentSize();\n  const {\n    parentSize,\n    children\n  } = props;\n  const memoKey = isSize(parentSize) ? [parentSize.width, parentSize.height] : [parentSize, -1];\n  const value = React.useMemo(() => ({\n    size: parentSize\n  }), memoKey);\n\n  if (currentParentSize === ParentSizeState.Disabled) {\n    return children ? React.createElement(React.Fragment, null, children) : null;\n  }\n\n  return React.createElement(ConstraintsContext.Provider, {\n    value: value\n  }, children);\n};\nexport const ConsumeParentSize = ConstraintsContext.Consumer;\nexport function useProvideParentSize(node, parentSize) {\n  return React.createElement(ProvideParentSize, {\n    parentSize: parentSize\n  }, node);\n}\nexport function useConstraints(props) {\n  const parentSize = useParentSize();\n  return calculateRect(props, parentSize);\n}","map":{"version":3,"mappings":"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","names":["React","DimensionType","ConstraintMask","valueToDimensionType","ConstraintValues","isFiniteNumber","isString","t","containsInvalidStringValues","props","left","right","top","bottom","center","some","constraintsEnabled","_constraints","enabled","sizeFromFiniteNumberProps","size","width","height","undefined","rectFromFiniteNumberProps","x","y","calculateSize","parentSize","ParentSizeState","Disabled","DisabledForCurrentLevel","constraintValues","getConstraintValues","pixelAlign","rect","toRect","deprecatedParentSize","calculateRect","aspectRatio","autoSize","constraintMask","quickfix","widthType","heightType","fixedSize","widthValue","heightValue","FixedNumber","parsedWidth","parseFloat","endsWith","FractionOfFreeSpace","Auto","Percentage","parsedHeight","centerAnchorX","centerAnchorY","ConstraintsContext","createContext","Unknown","useParentSize","useContext","isSize","o","ProvideParentSize","currentParentSize","children","memoKey","value","useMemo","Provider","ConsumeParentSize","Consumer","useProvideParentSize","node","useConstraints"],"sources":["../../../src/render/types/NewConstraints.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}