{"ast":null,"code":"import process from \"process\";\nimport { assert } from \"../../utils/assert.js\";\nimport { googleFontSelectorPrefix, GoogleFontSource } from \"./GoogleFontSource.js\";\nimport { LocalFontSource } from \"./LocalFontSource.js\";\nimport { TypefaceSourceNames } from \"./types.js\";\nimport { parseVariant } from \"./utils.js\";\nimport { CustomFontSource, customFontSelectorPrefix } from \"./CustomFontSource.js\";\nimport { loadFont, isFontReady } from \"./loadFont.js\";\nimport { runtime } from \"../../utils/runtimeInjection.js\";\n/**\n * Used to differentiate between requests that are immediately fulfilled,\n * because the font was already loaded, and those that resulted in a newly\n * loaded font\n *\n * @internal\n */\n\nexport var LoadFontResult;\n\n(function (LoadFontResult) {\n  LoadFontResult[LoadFontResult[\"AlreadyLoaded\"] = 0] = \"AlreadyLoaded\";\n  LoadFontResult[LoadFontResult[\"Loaded\"] = 1] = \"Loaded\";\n})(LoadFontResult || (LoadFontResult = {}));\n/**\n * Stores all available fonts, whether they are currently loaded or not\n * Provides APIs to import, add and resolve fonts and font selectors\n * Model:\n * `FontStore` (single instance available via `fontStore`)\n *   `FontSource` (local/google)\n *     `Typeface` (font family and its variants)\n *       `Font` (font family with a specific variant)\n * Every `Font` has a `selector` (string), which is a unique identifier of a font\n * Google web fonts provide consistent naming for fonts,\n * so it's also possible to `parseFontSelector()` and get some info about a web font from only its selector\n *\n * @internal\n */\n\n\nexport class FontStore {\n  /**\n   * Enabling the `FontStore` will make Text components automatically load\n   * their fonts on render. Otherwise font loading is the responsibility of\n   * the environment.\n   */\n  enabled = false;\n  bySelector = new Map();\n  getGoogleFontsListPromise;\n  loadedSelectors = new Set();\n  defaultFont;\n\n  constructor() {\n    this.local = new LocalFontSource();\n    this.google = new GoogleFontSource();\n    this.custom = new CustomFontSource();\n    this.bySelector = new Map();\n    this.importLocalFonts();\n    const defaultFont = this.getFontBySelector(\"Inter\");\n    assert(defaultFont, \"Can’t find Inter font\");\n    this.defaultFont = defaultFont;\n  }\n\n  local;\n  google;\n  custom;\n\n  addFont(font) {\n    this.bySelector.set(font.selector, font);\n  }\n\n  getAvailableFonts() {\n    return Array.from(this.bySelector.values());\n  }\n\n  importLocalFonts() {\n    this.local.importFonts().forEach(font => {\n      this.addFont(font); // Immediately “load” fonts (as they require no real loading, except Inter)\n\n      if (!this.local.interTypefaceSelectors.has(font.selector)) {\n        this.loadFont(font);\n      }\n    });\n  }\n\n  async importGoogleFonts() {\n    if (!this.getGoogleFontsListPromise) {\n      this.getGoogleFontsListPromise = runtime.fetchGoogleFontsList();\n      const googleFonts = await this.getGoogleFontsListPromise;\n      this.google.importFonts(googleFonts).forEach(locator => {\n        const font = this.createGoogleFont(locator);\n        this.addFont(font);\n      });\n    }\n\n    return this.getGoogleFontsListPromise;\n  }\n\n  importCustomFonts(assets) {\n    // Clear custom fonts from the list as they might have been deleted from assets\n    this.bySelector.forEach((_, key) => {\n      if (key.startsWith(customFontSelectorPrefix)) {\n        this.bySelector.delete(key);\n      }\n    });\n    this.custom.importFonts(assets).forEach(font => this.addFont(font));\n  }\n\n  getTypeface(info) {\n    const typeface = this[info.source].getTypefaceByFamily(info.family);\n    return typeface;\n  }\n\n  getFontBySelector(selector) {\n    let createFont = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (selector.startsWith(customFontSelectorPrefix)) {\n      return this.custom.getFontBySelector(selector, createFont);\n    }\n\n    return this.bySelector.get(selector) || null;\n  } // Function called by draft to get font properties for a selector, before the (google) font is available in the store\n  // It replaces a previous function that created Font instances and added them to the store\n  // on the fly while rendering drafts, which caused issues (overriding real google font info with fake instances with partial data).\n  // Ideally this should not happen, but that's a fix for another day\n\n\n  getDraftPropertiesBySelector(selector) {\n    const font = this.getFontBySelector(selector);\n\n    if (font) {\n      return {\n        style: font.style,\n        weight: font.weight,\n        variant: font.variant,\n        family: font.typeface.family,\n        source: font.typeface.source\n      };\n    } // If this is an unknown selector, attempt to parse it as a google font selector\n\n\n    const locator = this.google.parseSelector(selector);\n\n    if (locator) {\n      const fontVariant = parseVariant(locator.variant);\n\n      if (fontVariant) {\n        return {\n          style: fontVariant.style,\n          weight: fontVariant.weight,\n          variant: locator.variant,\n          family: locator.family,\n          source: TypefaceSourceNames.Google\n        };\n      }\n    }\n\n    return null;\n  }\n\n  createGoogleFont = locator => {\n    const {\n      source,\n      family,\n      variant,\n      file\n    } = locator; // Find the parent Typeface for the font (or create it)\n\n    let typeface = this.getTypeface(locator);\n\n    if (!typeface) {\n      typeface = this[source].createTypeface(family);\n    }\n\n    const variantInfo = parseVariant(variant) || {};\n    const {\n      weight,\n      style\n    } = variantInfo;\n    const selector = `GF;${family}-${variant}`;\n    const font = {\n      typeface,\n      variant,\n      selector,\n      weight,\n      style,\n      file\n    };\n    typeface.fonts.push(font);\n    return font;\n  };\n\n  isSelectorLoaded(selector) {\n    return this.loadedSelectors.has(selector);\n  }\n  /**\n   * Load all fonts for a typeface\n   * */\n\n\n  async loadTypeface(typeface) {\n    await Promise.all(typeface.fonts.map(f => this.loadFont(f)));\n  }\n  /**\n   * Load a single font\n   * */\n\n\n  async loadFont(font) {\n    if (this.isSelectorLoaded(font.selector)) {\n      return LoadFontResult.AlreadyLoaded;\n    }\n\n    if (font.typeface.source === TypefaceSourceNames.Local) {\n      // In case of a local font, we can safely assume it's loaded, except for\n      // the Inter font, which is loaded via an external CSS file. Loading will be\n      // initiated automatically by the browser, we only need to wait until it's ready.\n      // NOTE: Skip for tests and assume Inter is loaded.\n      if (this.local.interTypefaceSelectors.has(font.selector) && process.env.NODE_ENV !== \"test\") {\n        await isFontReady(font.typeface.family, font.style, font.weight);\n      }\n\n      this.loadedSelectors.add(font.selector);\n      return LoadFontResult.Loaded;\n    } // Load custom or Google font\n\n\n    if (!font.file) {\n      return Promise.reject(`Unable to load font: ${font.selector}`);\n    }\n\n    await loadFont({\n      family: font.typeface.family,\n      url: font.file,\n      weight: font.weight,\n      style: font.style\n    }, document);\n    this.loadedSelectors.add(font.selector);\n    return LoadFontResult.Loaded;\n  }\n\n  async loadWebFontsFromSelectors(selectors) {\n    if (!this.enabled) return []; // In case we are loading a Google font, make sure the list of\n    // Google fonts has been imported in the store\n\n    if (selectors.some(s => s.startsWith(googleFontSelectorPrefix))) {\n      await this.importGoogleFonts();\n    } // Filter out all unknown fonts. This means that not every selector\n    // that was requested might be loaded!\n\n\n    const fonts = selectors.map(s => this.bySelector.get(s)).filter(f => !!f); // Trigger the loading of all fonts. We’re using `allSettled` here\n    // (polyfilled below) to make sure as many as possible are loaded. Fonts\n    // that have failed before will immediately reject.\n\n    return Promise.allSettled(fonts.map(f => this.loadFont(f)));\n  }\n\n  async loadMissingFonts(fontSelectors, fontsLoadedCallback) {\n    const selectors = fontSelectors.filter(selector => {\n      return !fontStore.isSelectorLoaded(selector);\n    });\n    if (selectors.length === 0) return;\n    await fontStore.loadWebFontsFromSelectors(selectors);\n    const isEachFontLoaded = selectors.every(selector => {\n      return fontStore.isSelectorLoaded(selector);\n    });\n    if (isEachFontLoaded && fontsLoadedCallback) fontsLoadedCallback();\n  }\n\n}\n/** @internal */\n\nexport const fontStore = new FontStore();\n/** Promise.allSettled polyfill */\n\nPromise.allSettled = Promise.allSettled || (promises => Promise.all(promises.map(p => p.then(v => ({\n  status: \"fulfilled\",\n  value: v\n})).catch(e => ({\n  status: \"rejected\",\n  reason: e\n})))));","map":{"version":3,"mappings":"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","names":["process","assert","googleFontSelectorPrefix","GoogleFontSource","LocalFontSource","TypefaceSourceNames","parseVariant","CustomFontSource","customFontSelectorPrefix","loadFont","isFontReady","runtime","LoadFontResult","FontStore","enabled","bySelector","Map","getGoogleFontsListPromise","loadedSelectors","Set","defaultFont","constructor","local","google","custom","importLocalFonts","getFontBySelector","addFont","font","set","selector","getAvailableFonts","Array","from","values","importFonts","forEach","interTypefaceSelectors","has","importGoogleFonts","fetchGoogleFontsList","googleFonts","locator","createGoogleFont","importCustomFonts","assets","_","key","startsWith","delete","getTypeface","info","typeface","source","getTypefaceByFamily","family","createFont","get","getDraftPropertiesBySelector","style","weight","variant","parseSelector","fontVariant","Google","file","createTypeface","variantInfo","fonts","push","isSelectorLoaded","loadTypeface","Promise","all","map","f","AlreadyLoaded","Local","env","NODE_ENV","add","Loaded","reject","url","document","loadWebFontsFromSelectors","selectors","some","s","filter","allSettled","loadMissingFonts","fontSelectors","fontsLoadedCallback","fontStore","length","isEachFontLoaded","every","promises","p","then","v","status","value","catch","e","reason"],"sources":["../../../src/render/fonts/fontStore.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}