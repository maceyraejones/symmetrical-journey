{"ast":null,"code":"/**\n * Used by the {@link PropertyControls} and specifies the type of user interface for receiving\n * input. Each field has a distinct set of properties though they all accept `title` and `hidden`\n * properties.\n *\n * @remarks\n * ```javascript\n * export function MyComponent({ title }) {\n *   return <Frame size={\"100%\"}>{title}</Frame>\n * }\n *\n * addPropertyControls(MyComponent, {\n *   title: {\n *     type: ControlType.String,\n *     title: \"Title\",\n *     hidden: (props) => true\n *   },\n * }\n * ```\n * @public\n */\nexport var ControlType;\n\n(function (ControlType) {\n  /**\n   * A control that displays an on / off checkbox. The associated property will be `true` or `false`,\n   * depending on the state of the checkbox. Includes an optional `defaultValue`, which is set to `true` by default. You can also customize the labels displayed in the property panel with the `enabledTitle` and `disabledTitle` properties.\n   *\n   * @remarks\n   * ```javascript\n   * export function MyComponent(props) {\n   *   return <Frame size={\"100%\"}>{props.showText ? \"Hello World\" : null}</Frame>\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   showText: {\n   *     type: ControlType.Boolean,\n   *     title: \"Show Text\",\n   *     defaultValue: true,\n   *     enabledTitle: \"On\",\n   *     disabledTitle: \"Off\",\n   *   },\n   * })\n   * ```\n   */\n  ControlType[\"Boolean\"] = \"boolean\";\n  /**\n   * A control that accepts any numeric value. This will be provided directly as a property.\n   * Will display an input field with a range slider by default. The\n   * `displayStepper` option can be enabled to include a stepper control instead.\n   *\n   * @remarks\n   * ```javascript\n   * export function MyComponent(props) {\n   *   return <Frame rotateZ={props.rotation} size={\"100%\"}>{rotation}</Frame>\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   rotation: {\n   *     type: ControlType.Number,\n   *     defaultValue: 0,\n   *     min: 0,\n   *     max: 360,\n   *     unit: \"deg\",\n   *     step: 0.1,\n   *     displayStepper: true,\n   *   },\n   * })\n   * ```\n   */\n\n  ControlType[\"Number\"] = \"number\";\n  /**\n   * A control that accepts plain text values. This will be provided directly as a property.\n   * Will display an input field with an optional placeholder value.\n   * If `obscured` attribute is set to true a password input field will be used instead of a regular text input\n   * so that the value in the input will be visually obscured, yet still be available as plain text inside the component.\n   * `displayTextArea` can be enabled to display a multi-line input area instead.\n   *\n   * @remarks\n   * ```javascript\n   * export function MyComponent(props) {\n   *   return <Frame>{props.title} — {props.body}</Frame>\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   title: {\n   *     type: ControlType.String,\n   *     defaultValue: \"Framer\",\n   *     placeholder: \"Type something…\",\n   *   },\n   *   body: {\n   *     type: ControlType.String,\n   *     defaultValue: \"Lorem ipsum dolor sit amet.\",\n   *     placeholder: \"Type something…\",\n   *     displayTextArea: true,\n   *   },\n   * })\n   * ```\n   */\n\n  ControlType[\"String\"] = \"string\";\n  /**\n   * A control that can be used to take a single number or four distinct\n   * numeric input fields. The typical use case for this control is for visual\n   * properties like border, padding or margin. It will display an input field\n   * to accept a single value, alongside a segmented control allowing four\n   * distinct values to be provided.\n   *\n   * You can also set the default value for each valueKey as well as the\n   * toggleKey by setting their values on `defaultProps`.\n   *\n   *\n   * ```javascript\n   * export function MyComponent({\n   *   radius = 50,\n   *   topLeft,\n   *   topRight,\n   *   bottomRight,\n   *   bottomLeft,\n   *   isMixed = false,\n   * }) {\n   *   const borderRadius = isMixed\n   *     ? `${topLeft}px ${topRight}px ${bottomRight}px ${bottomLeft}px`\n   *     : `${radius}px`\n   *   return <Frame background={\"red\"} borderRadius={borderRadius} size={\"100%\"}></Frame>\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   radius: {\n   *     type: ControlType.FusedNumber,\n   *     title: \"Radius\",\n   *     defaultValue: 50,\n   *     toggleKey: \"isMixed\",\n   *     toggleTitles: [\"All\", \"Individual\"],\n   *     valueKeys: [\"topLeft\", \"topRight\", \"bottomRight\", \"bottomLeft\"],\n   *     valueLabels: [\"NW\", \"NE\", \"SE\", \"SW\"],\n   *     min: 0,\n   *   },\n   * })\n   *\n   * // Set the default value for each valueKey as well as the toggleKey by setting their values on `defaultProps`:\n   * MyComponent.defaultProps = {\n   *     radius: 10,\n   *     isMixed: true,\n   *     topLeft: 5,\n   *     topRight: 15,\n   *     bottomRight: 5,\n   *     bottomLeft: 15,\n   * }\n   * ```\n   */\n\n  ControlType[\"FusedNumber\"] = \"fusednumber\";\n  /**\n   * A property control that represents a list of options. The list contains primitive values and each\n   * value has to be unique. The selected option will be provided as a property. This control is displayed\n   * as a dropdown menu in which a user can select one of the items.\n   * `displaySegmentedControl` can be enabled to display a segmented control instead.\n   *\n   * ```javascript\n   * export function MyComponent(props) {\n   *   const value = props.value || \"a\"\n   *   const colors = { a: \"red\", b: \"green\", c: \"blue\" }\n   *   return <Frame background={colors[value]} size={\"100%\"}>{value}</Frame>\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   value: {\n   *     type: ControlType.Enum,\n   *     defaultValue: \"a\",\n   *     options: [\"a\", \"b\", \"c\"],\n   *     optionTitles: [\"Option A\", \"Option B\", \"Option C\"],\n   *   },\n   * })\n   * ```\n   */\n\n  ControlType[\"Enum\"] = \"enum\";\n  /**\n   * Deprecated, please use {@link ControlType.Enum} and enable displaySegmentedControl.\n   *\n   * @deprecated - Please use {@link ControlType.Enum} and enable displaySegmentedControl.\n   * @remarks\n   * ```javascript\n   * export function MyComponent(props) {\n   *   const value = props.value || \"a\"\n   *   const colors = { a: \"red\", b: \"green\", c: \"blue\" }\n   *   return <Frame background={colors[value]} size={\"100%\"}>{value}</Frame>\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   value: {\n   *     type: ControlType.SegmentedEnum,\n   *     defaultValue: \"a\",\n   *     options: [\"a\", \"b\", \"c\"],\n   *     optionTitles: [\"A\", \"B\", \"C\"],\n   *   },\n   * })\n   * ```\n   */\n\n  ControlType[\"SegmentedEnum\"] = \"segmentedenum\";\n  /**\n   * A control that represents a color value. It will be included in the component props as a string.\n   * This control is displayed as a color field and will provide the selected color in either\n   * HEX (`\"#fff\"`) or HSL (`hsla(203, 87%, 50%, 0.5)`) notation, depending on\n   * whether there is an alpha channel.\n   *\n   * @remarks\n   * ```javascript\n   * function MyComponent(props) {\n   *   return <Frame background={props.background} size={\"100%\"} />\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   background: {\n   *     type: ControlType.Color,\n   *     defaultValue: \"#fff\",\n   *   },\n   * })\n   * ```\n   */\n\n  ControlType[\"Color\"] = \"color\";\n  /**\n   * A control that allows the user to pick an image resource. It will\n   * be included in the component props as an URL string.\n   * Displayed as an image picker with associated file picker. The chosen asset\n   * will be provided as a fully qualified URL.\n   *\n   * @remarks\n   * ```jsx\n   * function MyComponent(props) {\n   *   return <Frame image={props.image} size={\"100%\"} />\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   image: {\n   *     type: ControlType.Image,\n   *   }\n   * })\n   * ```\n   */\n\n  ControlType[\"Image\"] = \"image\";\n  /**\n   * A control that allows the user to pick a file resource. It will be\n   * included in the component props as an URL string.\n   * Displayed as an file picker that will open a native file browser. The\n   * selected file will be provided as a fully qualified URL. The\n   * `allowedFileTypes` property must be provided to specify acceptable file\n   * types.\n   *\n   * @remarks\n   * ```javascript\n   * export function MyComponent(props) {\n   *   return (\n   *     <Frame size={\"100%\"}>\n   *       <video\n   *         style={{ objectFit: \"contain\", props.width, props.height }}\n   *         src={props.filepath}\n   *         controls\n   *       />\n   *     </Frame>\n   *   )\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   filepath: {\n   *     type: ControlType.File,\n   *     allowedFileTypes: [\"mov\"],\n   *   },\n   * })\n   * ```\n   */\n\n  ControlType[\"File\"] = \"file\";\n  /**\n   * A control that references to another component on the canvas,\n   * included in the component props as a React node.\n   * The component will have an outlet to allow linking to other Frames.\n   * Available Frames will also be displayed in a dropdown menu in the\n   * properties panel. The component reference will be provided as a property.\n   * As a convention, the name for the property is usually just `children`.\n   *\n   * Multiple components can be linked by combining the `ComponentInstance`\n   * type with the {@link ControlType.Array}.\n   *\n   * ```javascript\n   * export function MyComponent(props) {\n   *   return <Stack size={\"100%\"}>{props.children}</Stack>\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   children: {\n   *     type: ControlType.ComponentInstance,\n   *   },\n   * })\n   * ```\n   */\n\n  ControlType[\"ComponentInstance\"] = \"componentinstance\";\n  /**\n   * A control that allows multiple values per `ControlType`, provided as an\n   * array via properties. For most control types this will be displayed as an\n   * additional section in the properties panel allowing as many fields to be\n   * provided as required.\n   *\n   * For a {@link ControlType.ComponentInstance} the Frame will also gain an\n   * additional outlet control on the Canvas that allows links to be created\n   * between frames.\n   *\n   * Group properties together by using an object control.\n   *\n   * For multiple {@link ControlType.FusedNumber} values, you can pass in an\n   * array of single values as the React default prop.\n   *\n   * ```javascript\n   * export function MyComponent(props) {\n   *   const frames = props.images.map(image => <Frame image={image} width={\"1fr\"} height={\"1fr\"} />)\n   *   return <Stack size={\"100%\"}>{frames}</Stack>\n   * }\n   *\n   * // Add a repeatable image property control\n   * addPropertyControls(MyComponent, {\n   *   images: {\n   *     type: ControlType.Array,\n   *     control: {\n   *       type: ControlType.Image\n   *     }\n   *   },\n   *   // Allow up to five items\n   *   maxCount: 5,\n   * })\n   *\n   * // Add a multi-connector to your component to connect components on the canvas\n   * addPropertyControls(MyComponent, {\n   *   children: {\n   *     type: ControlType.Array,\n   *     control: {\n   *       type: ControlType.ComponentInstance\n   *     },\n   *     maxCount: 5,\n   *   },\n   * })\n   *\n   * // Add a list of objects\n   * addPropertyControls(MyComponent, {\n   *   myArray: {\n   *     type: ControlType.Array,\n   *     control: {\n   *       type: ControlType.Object,\n   *       controls: {\n   *         title: { type: ControlType.String, defaultValue: \"Employee\" },\n   *         avatar: { type: ControlType.Image },\n   *       },\n   *     },\n   *     defaultValue: [\n   *       { title: \"Jorn\" },\n   *       { title: \"Koen\" },\n   *     ],\n   *   },\n   * })\n   *\n   * // For multiple values, you can pass in an array of single values as the React default prop.\n   * MyComponent.defaultProps = {\n   *    paddings: [5, 10, 15],\n   * }\n   * ```\n   *\n   */\n\n  ControlType[\"Array\"] = \"array\";\n  /**\n   * A control that exposes events in the prototyping panel within the Framer UI. When choosing an event from the prototyping panel, you can select from a list of actions to trigger.\n   *\n   * ```javascript\n   * export function MyComponent(props) {\n   *   return <Frame onTap={props.onTap} size={\"100%\"} />\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   onTap: {\n   *     type: ControlType.EventHandler,\n   *   },\n   * })\n   * ```\n   */\n\n  ControlType[\"EventHandler\"] = \"eventhandler\";\n  /**\n   * A control that allows for editing Framer Motion transition options within the Framer UI.\n   *\n   * ```javascript\n   * export function MyComponent(props) {\n   *   return (\n   *       <Frame\n   *          animate={{ scale: 2 }}\n   *          transition={props.transition}\n   *       />\n   *   )\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   transition: {\n   *       type: ControlType.Transition,\n   *   },\n   * })\n   * ```\n   */\n\n  ControlType[\"Transition\"] = \"transition\";\n  /**\n   * A control that allows for grouping multiple properties as an object.\n   *\n   * ```javascript\n   * export function MyComponent(props) {\n   *   return <Frame opacity={props.myObject.opacity} background={props.myObject.tint} />\n   * }\n   *\n   * addPropertyControls(MyComponent, {\n   *   myObject: {\n   *     type: ControlType.Object,\n   *     controls: {\n   *       opacity: { type: ControlType.Number },\n   *       tint: { type: ControlType.Color },\n   *     }\n   *   }\n   * })\n   * ```\n   */\n\n  ControlType[\"Object\"] = \"object\";\n})(ControlType || (ControlType = {}));","map":{"version":3,"mappings":"AA6DA;;;;;;;;;;;;;;;;;;;;;AAqBA,WAAYA,WAAZ;;AAAA,WAAYA,WAAZ,EAAuB;AACnB;;;;;;;;;;;;;;;;;;;;;AAqBAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAuBAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAsBAA;AACA;;;;;;;;;;;;;;;;;;;;;AAoBAA;AACA;;;;;;;;;;;;;;;;;;;;AAmBAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAuBAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEAA;AACA;;;;;;;;;;;;;;;;AAeAA;AACA;;;;;;;;;;;;;;;;;;;;;AAoBAA;AACA;;;;;;;;;;;;;;;;;;;;AAmBAA;AACH,CA9YD,EAAYA,WAAW,KAAXA,WAAW,MAAvB","names":["ControlType"],"sources":["../../../src/render/types/PropertyControls.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}