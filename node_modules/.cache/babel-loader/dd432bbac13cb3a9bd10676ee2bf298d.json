{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haft_\\\\OneDrive\\\\Desktop\\\\MernP\\\\react-frontend\\\\src\\\\components\\\\Cards.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // import TinderCard from 'react-tinder-card';\n\nimport { Frame, useMotionValue, useTransform, useAnimation } from \"framer\";\nimport \"./Cards.css\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cards = () => {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [animals, SetAnimals] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n\n      try {\n        const {\n          data: response\n        } = await axios.get('/api/animal'); // console.log(response);\n\n        SetAnimals(response);\n      } catch (error) {\n        console.error(error.message);\n      }\n\n      setLoading(false);\n    };\n\n    fetchData();\n  }, []); // useEffect(() => {\n  //   const fetchData = async () =>{\n  //     setLoading(true);\n  //     try {\n  //       const {data: response} = await axios.get('/api/animal');\n  //       SetAnimals(response);\n  //     } catch (error) {\n  //       console.error(error.message);\n  //     }\n  //     setLoading(false);\n  //   }\n  //   fetchData();\n  // }, []);\n  //   const swiped = (direction, nameTodelete) =>{\n  // console.log(\"receiving\" + nameTodelete)\n  //   }\n  //   const onCardLeftScreen = (name) => {\n  //     console.log(name+ ' left the screen')\n  //   }\n\n  const style = {\n    backgroundImage: `url(${animals.imgUrl})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"contain\",\n    backgroundColor: \"#55ccff\",\n    boxShadow: \"5px 10px 18px #888888\",\n    borderRadius: 10,\n    height: 300\n  }; // To move the card as the user drags the cursor\n\n  const motionValue = useMotionValue(0); // To rotate the card as the card moves on drag\n\n  const rotateValue = useTransform(motionValue, [-200, 200], [-50, 50]); // To decrease opacity of the card when swiped\n  // on dragging card to left(-200) or right(200)\n  // opacity gradually changes to 0\n  // and when the card is in center opacity = 1\n\n  const opacityValue = useTransform(motionValue, [-200, -150, 0, 150, 200], [0, 1, 1, 1, 0]); // Framer animation hook\n\n  const animControls = useAnimation();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Frame, {\n      center: true // Card can be drag only on x-axis\n      ,\n      drag: \"x\",\n      x: motionValue,\n      rotate: rotateValue,\n      opacity: opacityValue,\n      dragConstraints: {\n        left: -1000,\n        right: 1000\n      },\n      style: style,\n      onDragEnd: (event, info) => {\n        // If the card is dragged only upto 150 on x-axis\n        // bring it back to initial position\n        if (Math.abs(info.point.x) <= 150) {\n          animControls.start({\n            x: 0\n          });\n        } else {\n          // If card is dragged beyond 150\n          // make it disappear\n          // making use of ternary operator\n          animControls.start({\n            x: info.point.x < 0 ? -200 : 200\n          });\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cards, \"KRhfLVbjiKnPnAahzuzLhO0+2wc=\", false, function () {\n  return [useMotionValue, useTransform, useTransform, useAnimation];\n});\n\n_c = Cards;\nexport default Cards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["C:/Users/haft_/OneDrive/Desktop/MernP/react-frontend/src/components/Cards.jsx"],"names":["React","useState","useEffect","Frame","useMotionValue","useTransform","useAnimation","axios","Cards","loading","setLoading","animals","SetAnimals","fetchData","data","response","get","error","console","message","style","backgroundImage","imgUrl","backgroundRepeat","backgroundSize","backgroundColor","boxShadow","borderRadius","height","motionValue","rotateValue","opacityValue","animControls","left","right","event","info","Math","abs","point","x","start"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react';\r\n// import TinderCard from 'react-tinder-card';\r\nimport { Frame, useMotionValue, useTransform, useAnimation } from \"framer\";\r\nimport \"./Cards.css\";\r\nimport axios from 'axios';\r\nconst Cards = () => {\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n    const [animals, SetAnimals] = useState([])\r\n\r\n\r\n     useEffect(() => {\r\n      const fetchData = async () =>{\r\n        setLoading(true);\r\n        try {\r\n          const {data: response} = await axios.get('/api/animal');\r\n          // console.log(response);\r\n          SetAnimals(response);\r\n        } catch (error) {\r\n          console.error(error.message);\r\n        }\r\n        setLoading(false);\r\n      }\r\n     \r\n      fetchData();\r\n    }, []);\r\n    // useEffect(() => {\r\n    //   const fetchData = async () =>{\r\n    //     setLoading(true);\r\n    //     try {\r\n    //       const {data: response} = await axios.get('/api/animal');\r\n    //       SetAnimals(response);\r\n    //     } catch (error) {\r\n    //       console.error(error.message);\r\n    //     }\r\n    //     setLoading(false);\r\n    //   }\r\n  \r\n    //   fetchData();\r\n    // }, []);\r\n    \r\n\r\n  //   const swiped = (direction, nameTodelete) =>{\r\n  // console.log(\"receiving\" + nameTodelete)\r\n\r\n  //   }\r\n  //   const onCardLeftScreen = (name) => {\r\n  //     console.log(name+ ' left the screen')\r\n  //   }\r\n \r\n  const style = {\r\n    backgroundImage: `url(${animals.imgUrl})`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"contain\",\r\n    backgroundColor: \"#55ccff\",\r\n    boxShadow: \"5px 10px 18px #888888\",\r\n    borderRadius: 10,\r\n    height: 300,\r\n  };\r\n   // To move the card as the user drags the cursor\r\n   const motionValue = useMotionValue(0);\r\n  \r\n   // To rotate the card as the card moves on drag\r\n   const rotateValue = useTransform(motionValue, [-200, 200], [-50, 50]);\r\n   \r\n   // To decrease opacity of the card when swiped\r\n   // on dragging card to left(-200) or right(200)\r\n   // opacity gradually changes to 0\r\n   // and when the card is in center opacity = 1\r\n   const opacityValue = useTransform(\r\n     motionValue,\r\n     [-200, -150, 0, 150, 200],\r\n     [0, 1, 1, 1, 0]\r\n   );\r\n   \r\n   // Framer animation hook\r\n   const animControls = useAnimation();\r\n  return (\r\n\r\n    <div className='App'>\r\n  <Frame\r\n        center\r\n        // Card can be drag only on x-axis\r\n        drag=\"x\"\r\n        x={motionValue}\r\n        rotate={rotateValue}\r\n        opacity={opacityValue}\r\n        dragConstraints={{ left: -1000, right: 1000 }}\r\n        style={style}\r\n        onDragEnd={(event, info) => {\r\n          // If the card is dragged only upto 150 on x-axis\r\n          // bring it back to initial position\r\n          if (Math.abs(info.point.x) <= 150) {\r\n            animControls.start({ x: 0 });\r\n          } else {\r\n            // If card is dragged beyond 150\r\n            // make it disappear\r\n            // making use of ternary operator\r\n            animControls.start({ x: info.point.x < 0 ? -200 : 200 });\r\n          }\r\n        }}\r\n      />\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cards"]},"metadata":{},"sourceType":"module"}