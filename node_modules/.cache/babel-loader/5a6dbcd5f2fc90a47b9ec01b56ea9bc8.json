{"ast":null,"code":"/**\n * @internal\n */\nexport class Observers {\n  observers = new Set();\n  transactions = {};\n\n  add(observer) {\n    this.observers.add(observer);\n    let isCalled = false;\n    return () => {\n      if (isCalled) {\n        return;\n      }\n\n      isCalled = true;\n      this.remove(observer);\n    };\n  }\n\n  remove(observer) {\n    this.observers.delete(observer);\n  }\n\n  notify(change, transaction) {\n    if (transaction) {\n      const accumulatedChange = this.transactions[transaction] || change;\n      accumulatedChange.value = change.value;\n      this.transactions[transaction] = accumulatedChange;\n    } else {\n      this.callObservers(change);\n    }\n  }\n\n  finishTransaction(transaction) {\n    const accumulatedChange = this.transactions[transaction];\n    delete this.transactions[transaction];\n    return this.callObservers(accumulatedChange, transaction);\n  }\n\n  callObservers(change, transaction) {\n    const finishObservers = []; // Make a copy and de-duplicate so we always call all handlers,\n    // even if the handler array changes because of handler call\n\n    new Set(this.observers).forEach(observer => {\n      if (typeof observer === \"function\") {\n        observer(change, transaction);\n      } else {\n        observer.update(change, transaction);\n        finishObservers.push(observer.finish);\n      }\n    });\n    return finishObservers;\n  }\n\n}","map":{"version":3,"mappings":"AA2BA;;;AAGA,OAAM,MAAOA,SAAP,CAAgB;AACVC,WAAS,GAAyB,IAAIC,GAAJ,EAAzB;AACTC,cAAY,GAAqC,EAArC;;AACpBC,KAAG,CAACC,QAAD,EAA0B;AACzB,SAAKJ,SAAL,CAAeG,GAAf,CAAmBC,QAAnB;AACA,QAAIC,QAAQ,GAAG,KAAf;AACA,WAAO,MAAK;AACR,UAAIA,QAAJ,EAAc;AACV;AACH;;AACDA,cAAQ,GAAG,IAAX;AACA,WAAKC,MAAL,CAAYF,QAAZ;AACH,KAND;AAOH;;AAEOE,QAAM,CAACF,QAAD,EAA0B;AACpC,SAAKJ,SAAL,CAAeO,MAAf,CAAsBH,QAAtB;AACH;;AAEDI,QAAM,CAACC,MAAD,EAAwBC,WAAxB,EAAmD;AACrD,QAAIA,WAAJ,EAAiB;AACb,YAAMC,iBAAiB,GAAG,KAAKT,YAAL,CAAkBQ,WAAlB,KAAkCD,MAA5D;AACAE,uBAAiB,CAACC,KAAlB,GAA0BH,MAAM,CAACG,KAAjC;AACA,WAAKV,YAAL,CAAkBQ,WAAlB,IAAiCC,iBAAjC;AACH,KAJD,MAIO;AACH,WAAKE,aAAL,CAAmBJ,MAAnB;AACH;AACJ;;AAEDK,mBAAiB,CAACJ,WAAD,EAA2B;AACxC,UAAMC,iBAAiB,GAAG,KAAKT,YAAL,CAAkBQ,WAAlB,CAA1B;AACA,WAAO,KAAKR,YAAL,CAAkBQ,WAAlB,CAAP;AACA,WAAO,KAAKG,aAAL,CAAmBF,iBAAnB,EAAsCD,WAAtC,CAAP;AACH;;AAEOG,eAAa,CAACJ,MAAD,EAAwBC,WAAxB,EAAmD;AACpE,UAAMK,eAAe,GAAqB,EAA1C,CADoE,CAEpE;AACA;;AACA,QAAId,GAAJ,CAAQ,KAAKD,SAAb,EAAwBgB,OAAxB,CAAgCZ,QAAQ,IAAG;AACvC,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChCA,gBAAQ,CAACK,MAAD,EAASC,WAAT,CAAR;AACH,OAFD,MAEO;AACHN,gBAAQ,CAACa,MAAT,CAAgBR,MAAhB,EAAwBC,WAAxB;AACAK,uBAAe,CAACG,IAAhB,CAAqBd,QAAQ,CAACe,MAA9B;AACH;AACJ,KAPD;AAQA,WAAOJ,eAAP;AACH;;AAhDiB","names":["Observers","observers","Set","transactions","add","observer","isCalled","remove","delete","notify","change","transaction","accumulatedChange","value","callObservers","finishTransaction","finishObservers","forEach","update","push","finish"],"sources":["../../../src/animation/Animatable/Observers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}