{"ast":null,"code":"function manageCache(cache, maxEntries) {\n  const size = cache.size;\n  if (size < maxEntries) return; // randomly start at 0 or 1, delete every other key in a fast way\n\n  let i = Math.round(Math.random());\n\n  for (const key of cache.keys()) {\n    if ((++i & 0x1) === 0x1) continue;\n    cache.delete(key);\n  }\n} // cache a mapping of arguments to created values in an automatically managed cache\n\n/** @internal */\n\n\nexport function memoize(maxEntries, cache, key, create) {\n  const r = cache.get(key);\n  if (r) return r;\n  manageCache(cache, maxEntries);\n  const g = create(key);\n  cache.set(key, g);\n  return g;\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,CAAqBC,KAArB,EAA2CC,UAA3C,EAA6D;AACzD,QAAMC,IAAI,GAAGF,KAAK,CAACE,IAAnB;AACA,MAAIA,IAAI,GAAGD,UAAX,EAAuB,OAFkC,CAIzD;;AACA,MAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,EAAX,CAAR;;AACA,OAAK,MAAMC,GAAX,IAAkBP,KAAK,CAACQ,IAAN,EAAlB,EAAgC;AAC5B,QAAI,CAAC,EAAEL,CAAF,GAAM,GAAP,MAAgB,GAApB,EAAyB;AACzBH,SAAK,CAACS,MAAN,CAAaF,GAAb;AACH;AACJ,C,CAED;;AACA;;;AACA,OAAM,SAAUG,OAAV,CAAwBT,UAAxB,EAA4CD,KAA5C,EAA8DO,GAA9D,EAAsEI,MAAtE,EAA2F;AAC7F,QAAMC,CAAC,GAAGZ,KAAK,CAACa,GAAN,CAAUN,GAAV,CAAV;AACA,MAAIK,CAAJ,EAAO,OAAOA,CAAP;AAEPb,aAAW,CAACC,KAAD,EAAQC,UAAR,CAAX;AACA,QAAMa,CAAC,GAAGH,MAAM,CAACJ,GAAD,CAAhB;AACAP,OAAK,CAACe,GAAN,CAAUR,GAAV,EAAeO,CAAf;AACA,SAAOA,CAAP;AACH","names":["manageCache","cache","maxEntries","size","i","Math","round","random","key","keys","delete","memoize","create","r","get","g","set"],"sources":["../../src/utils/memoize.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}