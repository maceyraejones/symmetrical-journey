{"ast":null,"code":"import { invariant } from \"hey-listen\";\nimport { px, complex } from \"style-value-types\";\nimport { Color } from \"../../render/types/Color/Color.js\";\n\nconst isCustomValue = v => {\n  return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\n\nconst isColorProp = key => key === \"background\" || key.endsWith(\"color\") || key.endsWith(\"Color\");\n\nconst resolveSingleCustomValue = (key, v) => {\n  if (v && typeof v === \"object\") {\n    invariant(isCustomValue(v), \"Motion styles must be numbers, strings, or an instance with a `toValue` and `mix` methods.\");\n    return v.toValue();\n  } else if (isColorProp(key) && typeof v === \"string\" && Color.isColor(v)) {\n    return Color(v).toValue();\n  }\n\n  return v;\n};\n\nconst resolveCustomValues = (key, v) => {\n  if (Array.isArray(v)) {\n    const numValues = v.length;\n    const resolved = [];\n\n    for (let i = 0; i < numValues; i++) {\n      resolved.push(resolveSingleCustomValue(key, v[i]));\n    }\n\n    return resolved;\n  } else {\n    return resolveSingleCustomValue(key, v);\n  }\n};\n\nconst customValueHandlers = {\n  size: {\n    set: (inputValues, outputValues, value) => {\n      if (inputValues.height === undefined) {\n        outputValues.height = value;\n      }\n\n      if (inputValues.width === undefined) {\n        outputValues.width = value;\n      }\n    },\n    type: px\n  },\n  radius: {\n    set: (inputValues, outputValues, value) => {\n      outputValues.borderRadius = value;\n    },\n    type: px\n  },\n  shadow: {\n    set: (inputValues, outputValues, value) => {\n      outputValues.boxShadow = value;\n    },\n    type: complex\n  }\n};\n/**\n * Transform custom values\n *\n * Resolves value types like `Color` into animatable value types like rgba strings.\n *\n * Converts special values like `radius` and `size` into DOM values like `width`/`height`/`borderRadius`\n *\n * @param values\n */\n\nexport const transformValues = values => {\n  const transformedValues = {};\n\n  for (const key in values) {\n    const resolved = resolveCustomValues(key, values[key]);\n    const valueHandler = customValueHandlers[key];\n\n    if (valueHandler) {\n      // If this is a special value type like `radius`, convert it\n      // And if this value type has a default (ie 'px') and its provided as a number, convert it.\n      const isDefaultType = valueHandler.type && typeof values[key] === \"number\";\n      const value = isDefaultType ? valueHandler.type.transform(values[key]) : values[key];\n      valueHandler.set(values, transformedValues, value);\n    } else {\n      // Otherwise just set it\n      transformedValues[key] = resolved;\n    }\n  }\n\n  return transformedValues;\n};","map":{"version":3,"mappings":"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","names":["invariant","px","complex","Color","isCustomValue","v","Boolean","mix","toValue","isColorProp","key","endsWith","resolveSingleCustomValue","isColor","resolveCustomValues","Array","isArray","numValues","length","resolved","i","push","customValueHandlers","size","set","inputValues","outputValues","value","height","undefined","width","type","radius","borderRadius","shadow","boxShadow","transformValues","values","transformedValues","valueHandler","isDefaultType","transform"],"sources":["../../../src/render/utils/transformCustomValues.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}