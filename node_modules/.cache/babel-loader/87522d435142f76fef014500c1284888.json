{"ast":null,"code":"import { Color } from \"./Color.js\";\nimport { hsvToStr, stringToObject } from \"./converters.js\";\n/**\n * @beta\n */\n\nexport var ConvertColor;\n\n(function (ConvertColor) {\n  function hueRotate(color, angle) {\n    return Color.toHslString(Color.hueRotate(Color(color), angle));\n  }\n\n  ConvertColor.hueRotate = hueRotate;\n\n  function setAlpha(color, alpha) {\n    return Color.toRgbString(Color.alpha(Color(color), alpha));\n  }\n\n  ConvertColor.setAlpha = setAlpha;\n\n  function getAlpha(color) {\n    const obj = stringToObject(color);\n    return obj ? obj.a : 1;\n  }\n\n  ConvertColor.getAlpha = getAlpha;\n\n  function multiplyAlpha(color, alpha) {\n    return Color.toRgbString(Color.multiplyAlpha(Color(color), alpha));\n  }\n\n  ConvertColor.multiplyAlpha = multiplyAlpha;\n\n  function toHex(color) {\n    return Color.toHexString(Color(color)).toUpperCase();\n  }\n\n  ConvertColor.toHex = toHex;\n\n  function toRgb(color) {\n    return Color.toRgb(Color(color));\n  }\n\n  ConvertColor.toRgb = toRgb;\n\n  function toRgbString(color) {\n    return Color.toRgbString(Color(color));\n  }\n\n  ConvertColor.toRgbString = toRgbString;\n\n  function toHSV(color) {\n    return Color.toHsv(Color(color));\n  }\n\n  ConvertColor.toHSV = toHSV;\n\n  function toHSL(color) {\n    return Color.toHsl(Color(color));\n  }\n\n  ConvertColor.toHSL = toHSL;\n\n  function toHslString(color) {\n    return Color.toHslString(Color(color));\n  }\n\n  ConvertColor.toHslString = toHslString;\n\n  function toHsvString(color) {\n    return Color.toHsvString(Color(color));\n  }\n\n  ConvertColor.toHsvString = toHsvString;\n\n  function hsvToHSLString(hsv) {\n    return Color.toHslString(Color(hsvToStr(hsv.h, hsv.s, hsv.v, hsv.a)));\n  }\n\n  ConvertColor.hsvToHSLString = hsvToHSLString;\n\n  function hsvToString(hsv) {\n    return hsvToStr(hsv.h, hsv.s, hsv.v);\n  }\n\n  ConvertColor.hsvToString = hsvToString;\n\n  function rgbaToString(color) {\n    return Color.toRgbString(Color(color));\n  }\n\n  ConvertColor.rgbaToString = rgbaToString;\n\n  function hslToString(hsl) {\n    return Color.toRgbString(Color(hsl));\n  }\n\n  ConvertColor.hslToString = hslToString;\n\n  function toColorPickerSquare(h) {\n    return Color.toRgbString(Color({\n      h,\n      s: 1,\n      l: 0.5,\n      a: 1\n    }));\n  }\n\n  ConvertColor.toColorPickerSquare = toColorPickerSquare;\n\n  function isValid(color) {\n    return Color(color).isValid !== false;\n  }\n\n  ConvertColor.isValid = isValid;\n\n  function equals(a, b) {\n    if (typeof a === \"string\") {\n      a = Color(a);\n    }\n\n    if (typeof b === \"string\") {\n      b = Color(b);\n    }\n\n    return Color.equal(a, b);\n  }\n\n  ConvertColor.equals = equals;\n\n  function toHexOrRgbaString(input) {\n    const color = Color(input);\n    return color.a !== 1 ? Color.toRgbString(color) : Color.toHexString(color);\n  }\n\n  ConvertColor.toHexOrRgbaString = toHexOrRgbaString;\n})(ConvertColor || (ConvertColor = {}));","map":{"version":3,"mappings":"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","names":["Color","hsvToStr","stringToObject","ConvertColor","hueRotate","color","angle","toHslString","setAlpha","alpha","toRgbString","getAlpha","obj","a","multiplyAlpha","toHex","toHexString","toUpperCase","toRgb","toHSV","toHsv","toHSL","toHsl","toHsvString","hsvToHSLString","hsv","h","s","v","hsvToString","rgbaToString","hslToString","hsl","toColorPickerSquare","l","isValid","equals","b","equal","toHexOrRgbaString","input"],"sources":["../../../../src/render/types/Color/ConvertColor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}