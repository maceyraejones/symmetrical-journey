{"ast":null,"code":"import * as React from \"react\";\nimport { cx } from \"./cx.js\";\nimport { useAddVariantProps } from \"./useAddVariantProps.js\";\nimport { useForceUpdate } from \"./useForceUpdate.js\";\nimport { useConstant } from \"../components/utils/useConstant.js\";\n\nfunction createGestureVariant(variant, type) {\n  return `${variant}-${type}`;\n}\n\nfunction nextVariant(allVariants, currentVariant) {\n  const index = allVariants.indexOf(currentVariant);\n  let nextIndex = index + 1;\n\n  if (nextIndex >= allVariants.length) {\n    nextIndex = 0;\n  }\n\n  return allVariants[nextIndex];\n}\n\nfunction activeTransition(transitions, variant) {\n  if (!transitions) return undefined;\n\n  if (variant) {\n    const variantTransition = transitions[variant];\n    if (variantTransition) return variantTransition;\n  }\n\n  return transitions.default;\n}\n\nfunction getGesture(enabledGestures, isHovered, isPressed) {\n  const {\n    hover,\n    pressed\n  } = enabledGestures || {};\n  if (pressed && isPressed) return \"pressed\";\n  if (hover && isHovered) return \"hover\";\n}\n\nfunction createVariantClassName(baseVariant, variantClassNames) {\n  const mappedClassName = variantClassNames[baseVariant];\n  if (mappedClassName) return mappedClassName;\n  return `framer-${\"v\"\n  /* Variant */\n  }-${baseVariant}`;\n}\n\nfunction safeBaseVariant(targetVariant, fallbackVariant, validBaseVariants) {\n  if (!targetVariant) return fallbackVariant;\n  if (validBaseVariants.has(targetVariant)) return targetVariant;\n  return fallbackVariant;\n}\n/**\n * Flag setVariantState as cycling variants.\n * @public\n */\n\n\nexport const CycleVariantState = Symbol(\"cycle\");\n/**\n * Handle stateful logic in Framer Canvas Components.\n *\n * @public\n */\n\nexport function useVariantState(_ref) {\n  let {\n    variant,\n    defaultVariant: externalDefaultVariant,\n    transitions: externalTransitions,\n    enabledGestures: externalEnabledGestures,\n    cycleOrder: externalCycleOrder = [],\n    variantProps = {},\n    variantClassNames = {}\n  } = _ref;\n  const forceUpdate = useForceUpdate();\n  const validBaseVariants = useConstant(() => new Set(externalCycleOrder));\n  const internalState = React.useRef({\n    isHovered: false,\n    isPressed: false,\n    baseVariant: safeBaseVariant(variant, externalDefaultVariant, validBaseVariants),\n    lastVariant: variant,\n    gestureVariant: undefined,\n    // When used in generated components, these are static values defined\n    // outside of the component function that also need to not result in\n    // memoized values being recalculated, so we dump them into the ref.\n    defaultVariant: externalDefaultVariant,\n    enabledGestures: externalEnabledGestures,\n    cycleOrder: externalCycleOrder,\n    transitions: externalTransitions\n  });\n  const resolveNextVariant = React.useCallback(targetBaseVariant => {\n    const {\n      isHovered,\n      isPressed,\n      enabledGestures,\n      defaultVariant\n    } = internalState.current;\n    const nextBaseVariant = safeBaseVariant(targetBaseVariant, defaultVariant, validBaseVariants);\n    const gesture = getGesture(enabledGestures?.[nextBaseVariant], isHovered, isPressed);\n    const nextGestureVariant = gesture ? createGestureVariant(nextBaseVariant, gesture) : undefined;\n    return [nextBaseVariant, nextGestureVariant];\n  }, [validBaseVariants]);\n  const setGestureState = React.useCallback(_ref2 => {\n    let {\n      isHovered,\n      isPressed\n    } = _ref2;\n    if (isHovered !== undefined) internalState.current.isHovered = isHovered;\n    if (isPressed !== undefined) internalState.current.isPressed = isPressed;\n    const {\n      baseVariant,\n      gestureVariant,\n      defaultVariant\n    } = internalState.current;\n    const [nextBase, nextGesture] = resolveNextVariant(baseVariant); // Only force a render if the new active variants have changed.\n\n    if (nextBase !== baseVariant || nextGesture !== gestureVariant) {\n      internalState.current.baseVariant = nextBase || defaultVariant;\n      internalState.current.gestureVariant = nextGesture;\n      forceUpdate();\n    }\n  }, [resolveNextVariant, forceUpdate]);\n  const setVariant = React.useCallback(proposedVariant => {\n    const {\n      defaultVariant,\n      cycleOrder,\n      baseVariant,\n      gestureVariant\n    } = internalState.current;\n    const nextBaseVariant = proposedVariant === CycleVariantState ? nextVariant(cycleOrder || [], baseVariant || defaultVariant) : proposedVariant;\n    const [nextBase, nextGesture] = resolveNextVariant(nextBaseVariant); // Only force a render if the new active variants have changed.\n\n    if (nextBase !== baseVariant || nextGesture !== gestureVariant) {\n      internalState.current.baseVariant = nextBase || defaultVariant;\n      internalState.current.gestureVariant = nextGesture;\n      forceUpdate();\n    }\n  }, [resolveNextVariant, forceUpdate]);\n\n  if (variant !== internalState.current.lastVariant) {\n    const [nextBase, nextGesture] = resolveNextVariant(variant);\n\n    if (nextBase !== internalState.current.baseVariant || nextGesture !== internalState.current.gestureVariant) {\n      internalState.current.baseVariant = nextBase;\n      internalState.current.gestureVariant = nextGesture;\n      internalState.current.lastVariant = variant;\n    }\n  }\n\n  const {\n    baseVariant,\n    gestureVariant,\n    defaultVariant,\n    enabledGestures,\n    isHovered,\n    isPressed\n  } = internalState.current; // Backwards compatibility for old components generated before\n  // addVariantProps was extracted to it's own hook.\n\n  const addVariantProps = useAddVariantProps(internalState.current.baseVariant, internalState.current.gestureVariant, variantProps);\n  return React.useMemo(() => {\n    const variants = [];\n    if (baseVariant !== defaultVariant) variants.push(baseVariant);\n    if (gestureVariant) variants.push(gestureVariant);\n    return {\n      variants,\n      baseVariant,\n      gestureVariant,\n      transition: activeTransition(internalState.current.transitions, baseVariant),\n      setVariant,\n      setGestureState,\n      addVariantProps,\n      classNames: cx(createVariantClassName(baseVariant, variantClassNames), getGesture(enabledGestures?.[baseVariant], isHovered, isPressed))\n    };\n  }, [baseVariant, gestureVariant, isHovered, isPressed, addVariantProps, setVariant, defaultVariant, enabledGestures, setGestureState, variantClassNames]);\n}","map":{"version":3,"mappings":"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","names":["React","cx","useAddVariantProps","useForceUpdate","useConstant","createGestureVariant","variant","type","nextVariant","allVariants","currentVariant","index","indexOf","nextIndex","length","activeTransition","transitions","undefined","variantTransition","default","getGesture","enabledGestures","isHovered","isPressed","hover","pressed","createVariantClassName","baseVariant","variantClassNames","mappedClassName","safeBaseVariant","targetVariant","fallbackVariant","validBaseVariants","has","CycleVariantState","Symbol","useVariantState","defaultVariant","externalDefaultVariant","externalTransitions","externalEnabledGestures","cycleOrder","externalCycleOrder","variantProps","forceUpdate","Set","internalState","useRef","lastVariant","gestureVariant","resolveNextVariant","useCallback","targetBaseVariant","current","nextBaseVariant","gesture","nextGestureVariant","setGestureState","nextBase","nextGesture","setVariant","proposedVariant","addVariantProps","useMemo","variants","push","transition","classNames"],"sources":["../../src/modules/useVariantState.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}