{"ast":null,"code":"import { roundWithOffset } from \"../utils/roundedNumber.js\";\n/**\n * @public\n */\n\nfunction Point(x, y) {\n  return {\n    x,\n    y\n  };\n}\n/**\n * @public\n */\n\n\n(function (Point) {\n  /** @alpha */\n  Point.add = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return args.reduce((previousValue, currentValue) => {\n      return {\n        x: previousValue.x + currentValue.x,\n        y: previousValue.y + currentValue.y\n      };\n    }, {\n      x: 0,\n      y: 0\n    });\n  };\n  /** @alpha */\n\n\n  Point.subtract = (a, b) => {\n    return {\n      x: a.x - b.x,\n      y: a.y - b.y\n    };\n  };\n  /** @alpha */\n\n\n  Point.multiply = (a, b) => {\n    return {\n      x: a.x * b,\n      y: a.y * b\n    };\n  };\n  /** @alpha */\n\n\n  Point.divide = (a, b) => {\n    return {\n      x: a.x / b,\n      y: a.y / b\n    };\n  };\n  /** @alpha */\n\n\n  Point.absolute = point => {\n    return {\n      x: Math.abs(point.x),\n      y: Math.abs(point.y)\n    };\n  };\n  /** @internal */\n\n\n  Point.reverse = point => {\n    return {\n      x: point.x * -1,\n      y: point.y * -1\n    };\n  };\n  /** @internal */\n\n\n  Point.pixelAligned = function (point) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      x: 0,\n      y: 0\n    };\n    return {\n      x: roundWithOffset(point.x, offset.x),\n      y: roundWithOffset(point.y, offset.y)\n    };\n  };\n  /** @alpha */\n\n\n  Point.distance = (a, b) => {\n    const deltaX = Math.abs(a.x - b.x);\n    const deltaY = Math.abs(a.y - b.y);\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  };\n  /** @alpha */\n\n\n  Point.angle = (a, b) => {\n    return Math.atan2(b.y - a.y, b.x - a.x) * 180 / Math.PI - 90;\n  };\n  /** @public */\n\n\n  Point.isEqual = (a, b) => {\n    return a.x === b.x && a.y === b.y;\n  };\n  /** @internal */\n\n\n  Point.rotationNormalizer = () => {\n    let lastValue;\n    return value => {\n      if (typeof lastValue !== \"number\") {\n        lastValue = value;\n      }\n\n      const diff = lastValue - value;\n      const maxDiff = Math.abs(diff) + 180;\n      const nTimes = Math.floor(maxDiff / 360);\n\n      if (diff < 180) {\n        value -= nTimes * 360;\n      }\n\n      if (diff > 180) {\n        value += nTimes * 360;\n      }\n\n      lastValue = value;\n      return value;\n    };\n  };\n  /** @alpha */\n\n\n  function center(a, b) {\n    return {\n      x: (a.x + b.x) / 2,\n      y: (a.y + b.y) / 2\n    };\n  }\n\n  Point.center = center;\n})(Point || (Point = {}));\n\nexport { Point };","map":{"version":3,"mappings":"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","names":["roundWithOffset","Point","x","y","args","reduce","previousValue","currentValue","a","b","point","Math","abs","offset","deltaX","deltaY","sqrt","atan2","PI","lastValue","value","diff","maxDiff","nTimes","floor","center"],"sources":["../../../src/render/types/Point.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}