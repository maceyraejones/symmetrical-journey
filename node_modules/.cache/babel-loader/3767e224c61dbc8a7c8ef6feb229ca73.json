{"ast":null,"code":"import { useRef, useEffect } from \"react\";\n/**\n * Workarounds for WebKit bugs\n * Some styles have to be toggled to take effect in certain situations.\n * To use in a class, see Layer.tsx\n * @internal\n */\n\nexport function useWebkitFixes(elementRef, style) {\n  const mixBlendModeSet = style.mixBlendMode && style.mixBlendMode !== \"normal\";\n  const radiusSet = style.borderRadius !== undefined;\n  const clip = style.overflow === \"hidden\";\n  useDidUpdate(() => {\n    if (mixBlendModeSet) {\n      resetSetStyle(elementRef.current, \"mixBlendMode\", style.mixBlendMode);\n    } // Note: this used to be dependent on re-rendering after any zoom change. If this causes regressions we can find a solution to restore or replace that behavior.\n\n  }, [mixBlendModeSet, elementRef.current]);\n  useDidUpdate(() => {\n    if (clip && radiusSet) {\n      resetSetStyle(elementRef.current, \"overflow\", \"hidden\", false);\n    }\n  }, [clip, radiusSet, elementRef.current]);\n}\n\nfunction useDidUpdate(update, dependencies) {\n  // Because hasMounted only changes and is only used inside of useEffect, it's not a dependency\n  const hasMounted = useRef(false);\n  useEffect(() => {\n    if (hasMounted.current) {\n      update();\n    }\n\n    hasMounted.current = true;\n  }, dependencies);\n}\n/** @internal */\n\n\nexport function resetSetStyle(element, key, toValue) {\n  let microtask = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  if (!element) {\n    return;\n  }\n\n  const value = toValue ? toValue : element.style[key];\n\n  const reset = () => {\n    element.style[key] = value;\n  };\n\n  element.style[key] = null;\n\n  if (microtask) {\n    void Promise.resolve().then(reset);\n  } else {\n    setTimeout(reset, 0);\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AAGA;;;;;;;AAMA,OAAM,SAAUC,cAAV,CAAyBC,UAAzB,EAA6DC,KAA7D,EAA+E;AACjF,QAAMC,eAAe,GAAGD,KAAK,CAACE,YAAN,IAAsBF,KAAK,CAACE,YAAN,KAAuB,QAArE;AACA,QAAMC,SAAS,GAAGH,KAAK,CAACI,YAAN,KAAuBC,SAAzC;AACA,QAAMC,IAAI,GAAGN,KAAK,CAACO,QAAN,KAAmB,QAAhC;AACAC,cAAY,CAAC,MAAK;AACd,QAAIP,eAAJ,EAAqB;AACjBQ,mBAAa,CAACV,UAAU,CAACW,OAAZ,EAAqB,cAArB,EAAqCV,KAAK,CAACE,YAA3C,CAAb;AACH,KAHa,CAId;;AACH,GALW,EAKT,CAACD,eAAD,EAAkBF,UAAU,CAACW,OAA7B,CALS,CAAZ;AAMAF,cAAY,CAAC,MAAK;AACd,QAAIF,IAAI,IAAIH,SAAZ,EAAuB;AACnBM,mBAAa,CAACV,UAAU,CAACW,OAAZ,EAAqB,UAArB,EAAiC,QAAjC,EAA2C,KAA3C,CAAb;AACH;AACJ,GAJW,EAIT,CAACJ,IAAD,EAAOH,SAAP,EAAkBJ,UAAU,CAACW,OAA7B,CAJS,CAAZ;AAKH;;AAED,SAASF,YAAT,CAAsBG,MAAtB,EAA0CC,YAA1C,EAA6D;AACzD;AACA,QAAMC,UAAU,GAAGjB,MAAM,CAAC,KAAD,CAAzB;AACAC,WAAS,CAAC,MAAK;AACX,QAAIgB,UAAU,CAACH,OAAf,EAAwB;AACpBC,YAAM;AACT;;AACDE,cAAU,CAACH,OAAX,GAAqB,IAArB;AACH,GALQ,EAKNE,YALM,CAAT;AAMH;AAED;;;AACA,OAAM,SAAUH,aAAV,CACFK,OADE,EAEFC,GAFE,EAGFC,OAHE,EAIuB;AAAA,MAAzBC,SAAyB,uEAAJ,IAAI;;AAEzB,MAAI,CAACH,OAAL,EAAc;AACV;AACH;;AAED,QAAMI,KAAK,GAAGF,OAAO,GAAGA,OAAH,GAAaF,OAAO,CAACd,KAAR,CAAce,GAAd,CAAlC;;AACA,QAAMI,KAAK,GAAG,MAAK;AACfL,WAAO,CAACd,KAAR,CAAce,GAAd,IAAqBG,KAArB;AACH,GAFD;;AAGAJ,SAAO,CAACd,KAAR,CAAce,GAAd,IAAqB,IAArB;;AACA,MAAIE,SAAJ,EAAe;AACX,SAAKG,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuBH,KAAvB,CAAL;AACH,GAFD,MAEO;AACHI,cAAU,CAACJ,KAAD,EAAQ,CAAR,CAAV;AACH;AACJ","names":["useRef","useEffect","useWebkitFixes","elementRef","style","mixBlendModeSet","mixBlendMode","radiusSet","borderRadius","undefined","clip","overflow","useDidUpdate","resetSetStyle","current","update","dependencies","hasMounted","element","key","toValue","microtask","value","reset","Promise","resolve","then","setTimeout"],"sources":["../../../src/render/utils/useWebkitFixes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}