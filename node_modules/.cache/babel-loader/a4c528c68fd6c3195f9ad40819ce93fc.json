{"ast":null,"code":"export const round = function (value) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let increment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let min = arguments.length > 3 ? arguments[3] : undefined;\n  let max = arguments.length > 4 ? arguments[4] : undefined;\n  const d = Math.pow(10, decimals);\n\n  if (increment) {\n    value = Math.round(value / increment) * increment;\n  }\n\n  value = Math.round(value * d) / d;\n\n  if (min && value < min) {\n    return min;\n  }\n\n  if (max && value > max) {\n    return max;\n  }\n\n  return value;\n};\nexport const roundWhole = function (value) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  // Return integer if whole value, else include decimals\n  if (decimals === null) {\n    decimals = 1;\n  }\n\n  if (parseInt(value.toString()) === value) {\n    return parseInt(value.toString());\n  }\n\n  return round(value, decimals);\n};\nexport const clamp = (value, a, b) => {\n  const min = Math.min(a, b);\n  const max = Math.max(a, b);\n\n  if (value < min) {\n    value = min;\n  }\n\n  if (value > max) {\n    value = max;\n  }\n\n  return value;\n}; // Taken from http://jsfiddle.net/Xz464/7/\n// Used by animation engine, needs to be very performant\n// export const mapRange = (value, fromLow, fromHigh, toLow, toHigh) => {\n// \treturn toLow + (((value - fromLow) / (fromHigh - fromLow)) * (toHigh - toLow))\n// }\n// Kind of similar as above but with a better syntax and a limiting option\n\nexport const modulate = function (value, rangeA, rangeB) {\n  let shouldClamp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const [fromLow, fromHigh] = Array.from(rangeA);\n  const [toLow, toHigh] = Array.from(rangeB); // if rangeB consists of Colors we return a color tween\n  // if Color.isColor(toLow) or _.isString(toLow) and Color.isColorString(toLow)\n  // \tratio = Utils.modulate(value, rangeA, [0, 1])\n  // \tresult = Color.mix(toLow, toHigh, ratio)\n  // \treturn result\n\n  const result = toLow + (value - fromLow) / (fromHigh - fromLow) * (toHigh - toLow);\n\n  if (shouldClamp === true) {\n    if (toLow < toHigh) {\n      if (result < toLow) {\n        return toLow;\n      }\n\n      if (result > toHigh) {\n        return toHigh;\n      }\n    } else {\n      if (result > toLow) {\n        return toLow;\n      }\n\n      if (result < toHigh) {\n        return toHigh;\n      }\n    }\n  }\n\n  return result;\n};","map":{"version":3,"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAG,UAACC,KAAD,EAA2E;AAAA,MAA3DC,QAA2D,uEAAhD,CAAgD;AAAA,MAA7CC,SAA6C,uEAAjC,CAAiC;AAAA,MAA9BC,GAA8B;AAAA,MAAhBC,GAAgB;AAC5F,QAAMC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaN,QAAb,CAAV;;AAEA,MAAIC,SAAJ,EAAe;AACXF,SAAK,GAAGM,IAAI,CAACP,KAAL,CAAWC,KAAK,GAAGE,SAAnB,IAAgCA,SAAxC;AACH;;AACDF,OAAK,GAAGM,IAAI,CAACP,KAAL,CAAWC,KAAK,GAAGK,CAAnB,IAAwBA,CAAhC;;AAEA,MAAIF,GAAG,IAAIH,KAAK,GAAGG,GAAnB,EAAwB;AACpB,WAAOA,GAAP;AACH;;AACD,MAAIC,GAAG,IAAIJ,KAAK,GAAGI,GAAnB,EAAwB;AACpB,WAAOA,GAAP;AACH;;AACD,SAAOJ,KAAP;AACH,CAfM;AAiBP,OAAO,MAAMQ,UAAU,GAAG,UAACR,KAAD,EAAgC;AAAA,MAAhBC,QAAgB,uEAAL,CAAK;;AACtD;AACA,MAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACnBA,YAAQ,GAAG,CAAX;AACH;;AACD,MAAIQ,QAAQ,CAACT,KAAK,CAACU,QAAN,EAAD,CAAR,KAA+BV,KAAnC,EAA0C;AACtC,WAAOS,QAAQ,CAACT,KAAK,CAACU,QAAN,EAAD,CAAf;AACH;;AACD,SAAOX,KAAK,CAACC,KAAD,EAAQC,QAAR,CAAZ;AACH,CATM;AAWP,OAAO,MAAMU,KAAK,GAAG,CAACX,KAAD,EAAgBY,CAAhB,EAA2BC,CAA3B,KAAwC;AACzD,QAAMV,GAAG,GAAGG,IAAI,CAACH,GAAL,CAASS,CAAT,EAAYC,CAAZ,CAAZ;AACA,QAAMT,GAAG,GAAGE,IAAI,CAACF,GAAL,CAASQ,CAAT,EAAYC,CAAZ,CAAZ;;AAEA,MAAIb,KAAK,GAAGG,GAAZ,EAAiB;AACbH,SAAK,GAAGG,GAAR;AACH;;AACD,MAAIH,KAAK,GAAGI,GAAZ,EAAiB;AACbJ,SAAK,GAAGI,GAAR;AACH;;AACD,SAAOJ,KAAP;AACH,CAXM,C,CAaP;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMc,QAAQ,GAAG,UAACd,KAAD,EAAgBe,MAAhB,EAA0CC,MAA1C,EAA2F;AAAA,MAAvBC,WAAuB,uEAAT,KAAS;AAC/G,QAAM,CAACC,OAAD,EAAUC,QAAV,IAAsBC,KAAK,CAACC,IAAN,CAAWN,MAAX,CAA5B;AACA,QAAM,CAACO,KAAD,EAAQC,MAAR,IAAkBH,KAAK,CAACC,IAAN,CAAWL,MAAX,CAAxB,CAF+G,CAI/G;AACA;AACA;AACA;AACA;;AAEA,QAAMQ,MAAM,GAAGF,KAAK,GAAI,CAACtB,KAAK,GAAGkB,OAAT,KAAqBC,QAAQ,GAAGD,OAAhC,CAAD,IAA8CK,MAAM,GAAGD,KAAvD,CAAvB;;AAEA,MAAIL,WAAW,KAAK,IAApB,EAA0B;AACtB,QAAIK,KAAK,GAAGC,MAAZ,EAAoB;AAChB,UAAIC,MAAM,GAAGF,KAAb,EAAoB;AAChB,eAAOA,KAAP;AACH;;AACD,UAAIE,MAAM,GAAGD,MAAb,EAAqB;AACjB,eAAOA,MAAP;AACH;AACJ,KAPD,MAOO;AACH,UAAIC,MAAM,GAAGF,KAAb,EAAoB;AAChB,eAAOA,KAAP;AACH;;AACD,UAAIE,MAAM,GAAGD,MAAb,EAAqB;AACjB,eAAOA,MAAP;AACH;AACJ;AACJ;;AAED,SAAOC,MAAP;AACH,CA/BM","names":["round","value","decimals","increment","min","max","d","Math","pow","roundWhole","parseInt","toString","clamp","a","b","modulate","rangeA","rangeB","shouldClamp","fromLow","fromHigh","Array","from","toLow","toHigh","result"],"sources":["../../src/utils/math.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}