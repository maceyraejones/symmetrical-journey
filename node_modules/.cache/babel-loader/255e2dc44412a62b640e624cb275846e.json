{"ast":null,"code":"import { useContext, useMemo } from \"react\";\nimport { LayoutIdContext } from \"../../components/AnimateLayout/LayoutIdContext.js\";\n/**\n * @internal\n */\n\nexport function useLayoutId(props) {\n  let {\n    specificLayoutId,\n    postfix\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    name,\n    layoutIdKey,\n    duplicatedFrom,\n    __fromCodeComponentNode = false,\n    drag\n  } = props;\n  const {\n    getLayoutId,\n    enabled\n  } = useContext(LayoutIdContext);\n  return useMemo(() => {\n    // If automatic layoutId's are disabled, but a Frame is used in code, and provides a layoutId, always use it.\n    if (!enabled) return props.layoutId;\n    const existingLayoutId = specificLayoutId || props.layoutId; // If no existing layoutId is provided, we do not generate a layoutId if:\n    // - No id is provided (a requirement for generating layoutIds)\n    // - The layer is not draggable, because magic motion and dragging are not supported (drag)\n    // - The layer should not be animated with magic motion (layoutIdKey)\n    // - The layer is the direct child of a ComponentContainer (Scroll/Page should always use specificLayoutId)\n\n    if (!existingLayoutId) {\n      if (drag || !layoutIdKey || __fromCodeComponentNode) return undefined;\n    } // If provided, use an existing layoutId, otherwise generate one with the LayoutIdContext.\n\n\n    const layoutIdCandidate = existingLayoutId || getLayoutId({\n      id: layoutIdKey,\n      name,\n      duplicatedFrom\n    }); // If for some reason we can't generate a layoutId, don't provide a layoutId.\n\n    if (!layoutIdCandidate) return undefined; // If we have provided a postfix, postfix whatever layoutId we've decided to use with the string, and return it.\n\n    return postfix ? `${layoutIdCandidate}-${postfix}` : layoutIdCandidate;\n  }, [enabled]); // Must return a stable value as layoutIds must be stable between all renders.\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AAEA,SAASC,eAAT,QAAgC,mDAAhC;AAgBA;;;;AAGA,OAAM,SAAUC,WAAV,CACFC,KADE,EAEiF;AAAA,MAAnF;AAAEC,oBAAF;AAAoBC;AAApB,GAAmF,uEAAF,EAAE;AAEnF,QAAM;AAAEC,QAAF;AAAQC,eAAR;AAAqBC,kBAArB;AAAqCC,2BAAuB,GAAG,KAA/D;AAAsEC;AAAtE,MAA+EP,KAArF;AACA,QAAM;AAAEQ,eAAF;AAAeC;AAAf,MAA2Bb,UAAU,CAACE,eAAD,CAA3C;AAEA,SAAOD,OAAO,CAAqB,MAAK;AACpC;AACA,QAAI,CAACY,OAAL,EAAc,OAAOT,KAAK,CAACU,QAAb;AAEd,UAAMC,gBAAgB,GAAGV,gBAAgB,IAAID,KAAK,CAACU,QAAnD,CAJoC,CAMpC;AACA;AACA;AACA;AACA;;AACA,QAAI,CAACC,gBAAL,EAAuB;AACnB,UAAIJ,IAAI,IAAI,CAACH,WAAT,IAAwBE,uBAA5B,EAAqD,OAAOM,SAAP;AACxD,KAbmC,CAepC;;;AACA,UAAMC,iBAAiB,GAAGF,gBAAgB,IAAIH,WAAW,CAAC;AAAEM,QAAE,EAAEV,WAAN;AAAmBD,UAAnB;AAAyBE;AAAzB,KAAD,CAAzD,CAhBoC,CAkBpC;;AACA,QAAI,CAACQ,iBAAL,EAAwB,OAAOD,SAAP,CAnBY,CAqBpC;;AACA,WAAOV,OAAO,GAAG,GAAGW,iBAAiB,IAAIX,OAAO,EAAlC,GAAuCW,iBAArD;AACH,GAvBa,EAuBX,CAACJ,OAAD,CAvBW,CAAd,CALmF,CA4BrE;AACjB","names":["useContext","useMemo","LayoutIdContext","useLayoutId","props","specificLayoutId","postfix","name","layoutIdKey","duplicatedFrom","__fromCodeComponentNode","drag","getLayoutId","enabled","layoutId","existingLayoutId","undefined","layoutIdCandidate","id"],"sources":["../../../src/render/utils/useLayoutId.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}