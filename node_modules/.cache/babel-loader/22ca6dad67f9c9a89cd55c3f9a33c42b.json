{"ast":null,"code":"import { Rect } from \"./Rect.js\";\nimport { isFiniteNumber } from \"../utils/isFiniteNumber.js\";\nimport { Animatable, isAnimatable } from \"../../animation/Animatable/Animatable.js\";\nimport { isReactChild, isReactElement } from \"../../utils/type-guards.js\";\nexport const constraintDefaults = {\n  left: null,\n  right: null,\n  top: null,\n  bottom: null,\n  centerX: \"50%\",\n  centerY: \"50%\",\n  aspectRatio: null,\n  parentSize: null,\n  width: 100,\n  height: 100\n};\n/** @internal */\n\nexport var DimensionType;\n\n(function (DimensionType) {\n  DimensionType[DimensionType[\"FixedNumber\"] = 0] = \"FixedNumber\";\n  DimensionType[DimensionType[\"Percentage\"] = 1] = \"Percentage\";\n  /** @internal */\n\n  DimensionType[DimensionType[\"Auto\"] = 2] = \"Auto\";\n  DimensionType[DimensionType[\"FractionOfFreeSpace\"] = 3] = \"FractionOfFreeSpace\";\n})(DimensionType || (DimensionType = {}));\n\nexport function isConstraintSupportingChild(child) {\n  if (!isReactChild(child) || !isReactElement(child)) {\n    return false;\n  } // Assume for now that all children support constraints (so they get passed parentSize)\n\n\n  return true;\n}\nexport function isConstraintSupportingClass(classToTest) {\n  if (classToTest === null || classToTest === undefined) {\n    return false;\n  }\n\n  return classToTest.supportsConstraints === true;\n}\n/** @internal */\n\nexport var ConstraintMask;\n\n(function (ConstraintMask) {\n  // Modifies the constraint mask to remove invalid (mutually exclusive) options and returns the original.\n  // TODO: this removes major inconsistencies but probably needs to be merged with ConstraintSolver.\n  ConstraintMask.quickfix = constraints => {\n    if (constraints.widthType === DimensionType.Auto || constraints.heightType === DimensionType.Auto) {\n      constraints.aspectRatio = null;\n    }\n\n    if (isFiniteNumber(constraints.aspectRatio)) {\n      if (constraints.left && constraints.right) {\n        constraints.widthType = DimensionType.FixedNumber;\n      }\n\n      if (constraints.top && constraints.bottom) {\n        constraints.heightType = DimensionType.FixedNumber;\n      }\n\n      if (constraints.left && constraints.right && constraints.top && constraints.bottom) {\n        constraints.bottom = false;\n      }\n\n      if (constraints.widthType !== DimensionType.FixedNumber && constraints.heightType !== DimensionType.FixedNumber) {\n        constraints.heightType = DimensionType.FixedNumber;\n      }\n    }\n\n    if (constraints.left && constraints.right) {\n      if (constraints.fixedSize || constraints.widthType === DimensionType.Auto || isFiniteNumber(constraints.maxWidth)) {\n        constraints.right = false;\n      }\n\n      constraints.widthType = DimensionType.FixedNumber;\n    }\n\n    if (constraints.top && constraints.bottom) {\n      if (constraints.fixedSize || constraints.heightType === DimensionType.Auto || isFiniteNumber(constraints.maxHeight)) {\n        constraints.bottom = false;\n      }\n\n      constraints.heightType = DimensionType.FixedNumber;\n    }\n\n    return constraints;\n  };\n})(ConstraintMask || (ConstraintMask = {}));\n/** @internal */\n\n\nexport function valueToDimensionType(value) {\n  if (typeof value === \"string\") {\n    const trimmedValue = value.trim();\n    if (trimmedValue === \"auto\") return DimensionType.Auto;\n    if (trimmedValue.endsWith(\"fr\")) return DimensionType.FractionOfFreeSpace;\n    if (trimmedValue.endsWith(\"%\")) return DimensionType.Percentage;\n  }\n\n  return DimensionType.FixedNumber;\n}\n/**\n * @internal\n */\n\nexport var ConstraintValues;\n\n(function (ConstraintValues) {\n  // Returns concrete current values given some ConstraintProperties.\n  ConstraintValues.fromProperties = props => {\n    const {\n      left,\n      right,\n      top,\n      bottom,\n      width,\n      height,\n      centerX,\n      centerY,\n      aspectRatio,\n      autoSize\n    } = props;\n    const constraints = ConstraintMask.quickfix({\n      left: isFiniteNumber(left) || isAnimatable(left),\n      right: isFiniteNumber(right) || isAnimatable(right),\n      top: isFiniteNumber(top) || isAnimatable(top),\n      bottom: isFiniteNumber(bottom) || isAnimatable(bottom),\n      widthType: valueToDimensionType(width),\n      heightType: valueToDimensionType(height),\n      aspectRatio: aspectRatio || null,\n      fixedSize: autoSize === true\n    });\n    let widthValue = null;\n    let heightValue = null;\n    let widthType = DimensionType.FixedNumber;\n    let heightType = DimensionType.FixedNumber;\n\n    if (constraints.widthType !== DimensionType.FixedNumber && typeof width === \"string\") {\n      const parsedWidth = parseFloat(width);\n\n      if (width.endsWith(\"fr\")) {\n        widthType = DimensionType.FractionOfFreeSpace;\n        widthValue = parsedWidth;\n      } else if (width === \"auto\") {\n        widthType = DimensionType.Auto;\n      } else {\n        // Percentage\n        widthType = DimensionType.Percentage;\n        widthValue = parsedWidth / 100;\n      }\n    } else if (width !== undefined && typeof width !== \"string\") {\n      widthValue = Animatable.getNumber(width);\n    }\n\n    if (constraints.heightType !== DimensionType.FixedNumber && typeof height === \"string\") {\n      const parsedHeight = parseFloat(height);\n\n      if (height.endsWith(\"fr\")) {\n        heightType = DimensionType.FractionOfFreeSpace;\n        heightValue = parsedHeight;\n      } else if (height === \"auto\") {\n        heightType = DimensionType.Auto;\n      } else {\n        // Percentage\n        heightType = DimensionType.Percentage;\n        heightValue = parseFloat(height) / 100;\n      }\n    } else if (height !== undefined && typeof height !== \"string\") {\n      heightValue = Animatable.getNumber(height);\n    }\n\n    let centerAnchorX = 0.5;\n    let centerAnchorY = 0.5;\n\n    if (centerX) {\n      centerAnchorX = parseFloat(centerX) / 100;\n    }\n\n    if (centerY) {\n      centerAnchorY = parseFloat(centerY) / 100;\n    }\n\n    return {\n      left: constraints.left ? Animatable.getNumber(left) : null,\n      right: constraints.right ? Animatable.getNumber(right) : null,\n      top: constraints.top ? Animatable.getNumber(top) : null,\n      bottom: constraints.bottom ? Animatable.getNumber(bottom) : null,\n      widthType,\n      heightType,\n      width: widthValue,\n      height: heightValue,\n      aspectRatio: constraints.aspectRatio || null,\n      centerAnchorX: centerAnchorX,\n      centerAnchorY: centerAnchorY\n    };\n  };\n\n  ConstraintValues.toMinSize = function (values, parentSize) {\n    let autoSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let width = null;\n    let height = null;\n    const parentWidth = parentSize ? parentSize.width : null;\n    const parentHeight = parentSize ? parentSize.height : null;\n    const hOpposingPinsOffset = pinnedOffset(values.left, values.right);\n\n    if (parentWidth && isFiniteNumber(hOpposingPinsOffset)) {\n      width = parentWidth - hOpposingPinsOffset;\n    } else if (autoSize && values.widthType === DimensionType.Auto) {\n      width = autoSize.width;\n    } else if (isFiniteNumber(values.width)) {\n      switch (values.widthType) {\n        case DimensionType.FixedNumber:\n          width = values.width;\n          break;\n\n        case DimensionType.FractionOfFreeSpace:\n          width = 0;\n          break;\n\n        case DimensionType.Percentage:\n          if (parentWidth) {\n            width = parentWidth * values.width;\n          }\n\n          break;\n      }\n    }\n\n    const vOpposingPinsOffset = pinnedOffset(values.top, values.bottom);\n\n    if (parentHeight && isFiniteNumber(vOpposingPinsOffset)) {\n      height = parentHeight - vOpposingPinsOffset;\n    } else if (autoSize && values.heightType === DimensionType.Auto) {\n      height = autoSize.height;\n    } else if (isFiniteNumber(values.height)) {\n      switch (values.heightType) {\n        case DimensionType.FixedNumber:\n          height = values.height;\n          break;\n\n        case DimensionType.FractionOfFreeSpace:\n          height = 0;\n          break;\n\n        case DimensionType.Percentage:\n          if (parentHeight) {\n            height = parentHeight * values.height;\n          }\n\n          break;\n      }\n    }\n\n    return sizeAfterApplyingDefaultsAndAspectRatio(width, height, values);\n  };\n\n  ConstraintValues.toSize = (values, parentSize, autoSize, freeSpace) => {\n    let width = null;\n    let height = null;\n    const parentWidth = parentSize ? Animatable.getNumber(parentSize.width) : null;\n    const parentHeight = parentSize ? Animatable.getNumber(parentSize.height) : null;\n    const hOpposingPinsOffset = pinnedOffset(values.left, values.right);\n\n    if (parentWidth && isFiniteNumber(hOpposingPinsOffset)) {\n      width = parentWidth - hOpposingPinsOffset;\n    } else if (autoSize && values.widthType === DimensionType.Auto) {\n      width = autoSize.width;\n    } else if (isFiniteNumber(values.width)) {\n      switch (values.widthType) {\n        case DimensionType.FixedNumber:\n          width = values.width;\n          break;\n\n        case DimensionType.FractionOfFreeSpace:\n          width = freeSpace ? freeSpace.freeSpaceInParent.width / freeSpace.freeSpaceUnitDivisor.width * values.width : 0;\n          break;\n\n        case DimensionType.Percentage:\n          if (parentWidth) {\n            width = parentWidth * values.width;\n          }\n\n          break;\n      }\n    }\n\n    const vOpposingPinsOffset = pinnedOffset(values.top, values.bottom);\n\n    if (parentHeight && isFiniteNumber(vOpposingPinsOffset)) {\n      height = parentHeight - vOpposingPinsOffset;\n    } else if (autoSize && values.heightType === DimensionType.Auto) {\n      height = autoSize.height;\n    } else if (isFiniteNumber(values.height)) {\n      switch (values.heightType) {\n        case DimensionType.FixedNumber:\n          height = values.height;\n          break;\n\n        case DimensionType.FractionOfFreeSpace:\n          height = freeSpace ? freeSpace.freeSpaceInParent.height / freeSpace.freeSpaceUnitDivisor.height * values.height : 0;\n          break;\n\n        case DimensionType.Percentage:\n          if (parentHeight) {\n            height = parentHeight * values.height;\n          }\n\n          break;\n      }\n    }\n\n    return sizeAfterApplyingDefaultsAndAspectRatio(width, height, values);\n  }; // Returns a parent-relative rect given concrete ConstraintValues.\n\n\n  ConstraintValues.toRect = function (values, parentSize) {\n    let autoSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let pixelAlign = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let freeSpace = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let x = values.left || 0;\n    let y = values.top || 0;\n    let width = null;\n    let height = null;\n    const parentWidth = parentSize ? Animatable.getNumber(parentSize.width) : null;\n    const parentHeight = parentSize ? Animatable.getNumber(parentSize.height) : null;\n    const hOpposingPinsOffset = pinnedOffset(values.left, values.right);\n\n    if (parentWidth && isFiniteNumber(hOpposingPinsOffset)) {\n      width = parentWidth - hOpposingPinsOffset;\n    } else if (autoSize && values.widthType === DimensionType.Auto) {\n      width = autoSize.width;\n    } else if (isFiniteNumber(values.width)) {\n      switch (values.widthType) {\n        case DimensionType.FixedNumber:\n          width = values.width;\n          break;\n\n        case DimensionType.FractionOfFreeSpace:\n          width = freeSpace ? freeSpace.freeSpaceInParent.width / freeSpace.freeSpaceUnitDivisor.width * values.width : null;\n          break;\n\n        case DimensionType.Percentage:\n          if (parentWidth) {\n            width = parentWidth * values.width;\n          }\n\n          break;\n      }\n    }\n\n    const vOpposingPinsOffset = pinnedOffset(values.top, values.bottom);\n\n    if (parentHeight && isFiniteNumber(vOpposingPinsOffset)) {\n      height = parentHeight - vOpposingPinsOffset;\n    } else if (autoSize && values.heightType === DimensionType.Auto) {\n      height = autoSize.height;\n    } else if (isFiniteNumber(values.height)) {\n      switch (values.heightType) {\n        case DimensionType.FixedNumber:\n          height = values.height;\n          break;\n\n        case DimensionType.FractionOfFreeSpace:\n          height = freeSpace ? freeSpace.freeSpaceInParent.height / freeSpace.freeSpaceUnitDivisor.height * values.height : null;\n          break;\n\n        case DimensionType.Percentage:\n          if (parentHeight) {\n            height = parentHeight * values.height;\n          }\n\n          break;\n      }\n    }\n\n    const sizeWithDefaults = sizeAfterApplyingDefaultsAndAspectRatio(width, height, values);\n    width = sizeWithDefaults.width;\n    height = sizeWithDefaults.height;\n\n    if (values.left !== null) {\n      x = values.left;\n    } else if (parentWidth && values.right !== null) {\n      x = parentWidth - values.right - width;\n    } else if (parentWidth) {\n      x = values.centerAnchorX * parentWidth - width / 2;\n    }\n\n    if (values.top !== null) {\n      y = values.top;\n    } else if (parentHeight && values.bottom !== null) {\n      y = parentHeight - values.bottom - height;\n    } else if (parentHeight) {\n      y = values.centerAnchorY * parentHeight - height / 2;\n    }\n\n    const f = {\n      x,\n      y,\n      width,\n      height\n    };\n\n    if (pixelAlign) {\n      return Rect.pixelAligned(f);\n    }\n\n    return f;\n  };\n})(ConstraintValues || (ConstraintValues = {}));\n\nconst defaultWidth = 200;\nconst defaultHeight = 200;\n\nfunction sizeAfterApplyingDefaultsAndAspectRatio(width, height, values) {\n  let w = isFiniteNumber(width) ? width : defaultWidth;\n  let h = isFiniteNumber(height) ? height : defaultHeight;\n\n  if (isFiniteNumber(values.aspectRatio) && values.aspectRatio > 0) {\n    if (isFiniteNumber(values.left) && isFiniteNumber(values.right)) {\n      h = w / values.aspectRatio;\n    } else if (isFiniteNumber(values.top) && isFiniteNumber(values.bottom)) {\n      w = h * values.aspectRatio;\n    } else if (values.widthType !== DimensionType.FixedNumber) {\n      h = w / values.aspectRatio;\n    } else {\n      w = h * values.aspectRatio;\n    }\n  }\n\n  return {\n    width: w,\n    height: h\n  };\n}\n\nfunction pinnedOffset(start, end) {\n  if (!isFiniteNumber(start) || !isFiniteNumber(end)) return null;\n  return start + end;\n}\n/** @internal */\n\n\nexport function getMergedConstraintsProps(props, constraints) {\n  const result = {};\n\n  if (props.constraints) {\n    result.constraints = { ...props.constraints,\n      ...constraints\n    };\n  } else {\n    Object.assign(result, constraints);\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["Rect","isFiniteNumber","Animatable","isAnimatable","isReactChild","isReactElement","constraintDefaults","left","right","top","bottom","centerX","centerY","aspectRatio","parentSize","width","height","DimensionType","isConstraintSupportingChild","child","isConstraintSupportingClass","classToTest","undefined","supportsConstraints","ConstraintMask","constraints","widthType","Auto","heightType","FixedNumber","fixedSize","maxWidth","maxHeight","valueToDimensionType","value","trimmedValue","trim","endsWith","FractionOfFreeSpace","Percentage","ConstraintValues","props","autoSize","quickfix","widthValue","heightValue","parsedWidth","parseFloat","getNumber","parsedHeight","centerAnchorX","centerAnchorY","values","parentWidth","parentHeight","hOpposingPinsOffset","pinnedOffset","vOpposingPinsOffset","sizeAfterApplyingDefaultsAndAspectRatio","freeSpace","freeSpaceInParent","freeSpaceUnitDivisor","pixelAlign","x","y","sizeWithDefaults","f","pixelAligned","defaultWidth","defaultHeight","w","h","start","end","getMergedConstraintsProps","result","Object","assign"],"sources":["../../../src/render/types/Constraints.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}